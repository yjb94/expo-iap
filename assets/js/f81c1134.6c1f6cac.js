"use strict";(self.webpackChunkexpo_iap_docs=self.webpackChunkexpo_iap_docs||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"v2-8-1-release","metadata":{"permalink":"/blog/v2-8-1-release","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-08-19-v2-8-1-release.md","source":"@site/blog/2025-08-19-v2-8-1-release.md","title":"v2.8.1 Release - Type System Improvements","description":"This release resolves type mismatches between Product and Purchase types across iOS and Android platforms.","date":"2025-08-19T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":true,"label":"types","permalink":"/blog/tags/types"},{"inline":false,"label":"iOS","permalink":"/blog/tags/ios","description":"iOS platform specific features"},{"inline":false,"label":"Android","permalink":"/blog/tags/android","description":"Android platform specific features"}],"readingTime":0.89,"hasTruncateMarker":false,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"v2-8-1-release","title":"v2.8.1 Release - Type System Improvements","authors":["hyochan"],"tags":["release","types","ios","android"]},"unlisted":false,"nextItem":{"title":"v2.8.0 Migration Guide - iOS Field Naming Convention Update","permalink":"/blog/v2-8-0-migration-guide"}},"content":"This release resolves type mismatches between Product and Purchase types across iOS and Android platforms.\\n\\n## What\'s New\\n\\n### Type System Improvements\\n\\n- Added `platform` field to all types for runtime type discrimination\\n- Moved common fields (`ids`, `debugDescription`) to shared base types\\n- Fixed iOS native code to populate missing subscription fields\\n\\n### No Breaking Changes\\n\\nAll existing code continues to work. Update to platform-specific field names before v2.9.0:\\n\\n- Android: `name` \u2192 `nameAndroid`\\n- iOS: `displayName` \u2192 `displayNameIOS`\\n\\n## Important Note\\n\\n**If upgrading from versions before v2.8.0**, please review the [v2.8.0 migration guide](https://expo-iap.hyo.dev/blog/v2-8-0-migration-guide) first, as it contains breaking changes for iOS field naming conventions.\\n\\n## Type Discrimination Example\\n\\n```typescript\\nimport {Product, Purchase} from \'expo-iap\';\\n\\nfunction handleProduct(product: Product) {\\n  if (product.platform === \'ios\') {\\n    // TypeScript knows this is ProductIOS\\n    console.log(product.isFamilyShareableIOS);\\n  } else if (product.platform === \'android\') {\\n    // TypeScript knows this is ProductAndroid\\n    console.log(product.nameAndroid);\\n  }\\n}\\n```\\n\\n## Installation\\n\\n```bash\\nnpm install expo-iap@2.8.1\\n```\\n\\n## Next Steps\\n\\nDeprecated fields will be removed in v2.9.0. Update your code now to ensure smooth migration.\\n\\nFor details, see the [full changelog](https://github.com/hyochan/expo-iap/blob/main/CHANGELOG.md)."},{"id":"v2-8-0-migration-guide","metadata":{"permalink":"/blog/v2-8-0-migration-guide","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-08-18-v2-8-0-migration-guide.md","source":"@site/blog/2025-08-18-v2-8-0-migration-guide.md","title":"v2.8.0 Migration Guide - iOS Field Naming Convention Update","description":"Breaking Changes","date":"2025-08-18T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":true,"label":"breaking-change","permalink":"/blog/tags/breaking-change"},{"inline":false,"label":"Migration","permalink":"/blog/tags/migration","description":"Migration guides and updates"}],"readingTime":3.65,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"v2-8-0-migration-guide","title":"v2.8.0 Migration Guide - iOS Field Naming Convention Update","authors":["hyochan"],"tags":["release","breaking-change","migration"]},"unlisted":false,"prevItem":{"title":"v2.8.1 Release - Type System Improvements","permalink":"/blog/v2-8-1-release"},"nextItem":{"title":"v2.7.3 Release - Google Play Billing Library v8.0.0 Support","permalink":"/blog/v2-7-3-release"}},"content":"## Breaking Changes\\n\\nVersion 2.8.0 introduces naming convention changes:\\n\\n1. **iOS suffix convention**: Fields with iOS suffixes now use uppercase `IOS` instead of `Ios`\\n2. **ID suffix convention**: All fields ending with `ID` now use `Id` instead for consistency (e.g., `subscriptionGroupID` \u2192 `subscriptionGroupId`, `bundleID` \u2192 `bundleId`)\\n\\n**Note:** Android field names remain unchanged as they already follow the correct convention (e.g., `autoRenewingAndroid`, `purchaseTokenAndroid`).\\n\\n\x3c!-- truncate --\x3e\\n\\n## What Changed\\n\\n## iOS Changes\\n\\n### Product Types\\n\\n**ProductIOS & SubscriptionProductIOS:**\\n\\n- `displayName` - Product display name\\n- `isFamilyShareable` - Family sharing availability\\n- `jsonRepresentation` - JSON representation of product\\n- `introductoryPriceNumberOfPeriodsIOS` - Introductory price period count\\n- `introductoryPriceSubscriptionPeriodIOS` - Introductory price period\\n- `introductoryPriceAsAmountIOS` - Introductory price amount\\n- `introductoryPricePaymentModeIOS` - Introductory price payment mode\\n- `subscriptionPeriodNumberIOS` - Subscription period number\\n- `subscriptionPeriodUnitIOS` - Subscription period unit\\n\\n**SubscriptionInfo:**\\n\\n- `subscriptionGroupId` - Subscription group identifier (changed from `subscriptionGroupID`)\\n\\n### Purchase Types\\n\\n**ProductPurchaseIOS** includes these StoreKit 2 fields:\\n\\n- `quantityIOS`, `originalTransactionDateIOS`, `originalTransactionIdentifierIOS`\\n- `expirationDateIOS`, `webOrderLineItemIdIOS`, `environmentIOS`\\n- `storefrontCountryCodeIOS`, `appBundleIdIOS`, `productTypeIOS`\\n- `subscriptionGroupIdIOS`, `isUpgradedIOS`, `ownershipTypeIOS`\\n- `reasonIOS`, `reasonStringRepresentationIOS`, `transactionReasonIOS`\\n- `revocationDateIOS`, `revocationReasonIOS`, `offerIOS`\\n- `priceIOS`, `currencyIOS`, `jwsRepresentationIOS` (deprecated)\\n\\n**AppTransactionIOS** (iOS 16.0+):\\n\\n- `appTransactionId` - App transaction identifier (changed from `appTransactionID`)\\n- `bundleId` - Bundle identifier (changed from `bundleID`)\\n- `appId` - App identifier (changed from `appID`)\\n- `appVersionId` - App version identifier (changed from `appVersionID`)\\n\\n**Breaking Changes - Field Renaming:**\\n\\n### iOS Suffix Changes (Ios \u2192 IOS)\\n\\n| Old Field Name                     | New Field Name                     |\\n| ---------------------------------- | ---------------------------------- |\\n| `quantityIos`                      | `quantityIOS`                      |\\n| `originalTransactionDateIos`       | `originalTransactionDateIOS`       |\\n| `originalTransactionIdentifierIos` | `originalTransactionIdentifierIOS` |\\n| `appBundleIdIos`                   | `appBundleIdIOS`                   |\\n| `productTypeIos`                   | `productTypeIOS`                   |\\n| `subscriptionGroupIdIos`           | `subscriptionGroupIdIOS`           |\\n| `webOrderLineItemIdIos`            | `webOrderLineItemIdIOS`            |\\n| `expirationDateIos`                | `expirationDateIOS`                |\\n| `isUpgradedIos`                    | `isUpgradedIOS`                    |\\n| `ownershipTypeIos`                 | `ownershipTypeIOS`                 |\\n| `revocationDateIos`                | `revocationDateIOS`                |\\n| `revocationReasonIos`              | `revocationReasonIOS`              |\\n| `transactionReasonIos`             | `transactionReasonIOS`             |\\n| `environmentIos`                   | `environmentIOS`                   |\\n| `storefrontCountryCodeIos`         | `storefrontCountryCodeIOS`         |\\n| `reasonIos`                        | `reasonIOS`                        |\\n| `offerIos`                         | `offerIOS`                         |\\n| `priceIos`                         | `priceIOS`                         |\\n| `currencyIos`                      | `currencyIOS`                      |\\n| `jwsRepresentationIos`             | `jwsRepresentationIOS`             |\\n| `reasonStringRepresentationIos`    | `reasonStringRepresentationIOS`    |\\n\\n### ID Suffix Changes (ID \u2192 Id)\\n\\n| Old Field Name        | New Field Name        | Type/Context      |\\n| --------------------- | --------------------- | ----------------- |\\n| `subscriptionGroupID` | `subscriptionGroupId` | SubscriptionInfo  |\\n| `appTransactionID`    | `appTransactionId`    | AppTransactionIOS |\\n| `bundleID`            | `bundleId`            | AppTransactionIOS |\\n| `appID`               | `appId`               | AppTransactionIOS |\\n| `appVersionID`        | `appVersionId`        | AppTransactionIOS |\\n\\n### Function Parameter Changes\\n\\n| Function                     | Old Parameter | New Parameter |\\n| ---------------------------- | ------------- | ------------- |\\n| `isEligibleForIntroOfferIOS` | `groupID`     | `groupId`     |\\n\\n## Android Changes\\n\\n### Product Types\\n\\n**ProductAndroid & SubscriptionProductAndroid:**\\n\\n- `name` - Product display name\\n- `oneTimePurchaseOfferDetails` - One-time purchase offer details\\n- `subscriptionOfferDetails` - Subscription offer details array\\n\\n### Purchase Types\\n\\n**ProductPurchaseAndroid** includes these Android Billing Library fields:\\n\\n- `ids` - Array of product IDs\\n- `purchaseTokenAndroid` - Android purchase token (deprecated, use `purchaseToken`)\\n- `dataAndroid` - Purchase data\\n- `signatureAndroid` - Purchase signature\\n- `autoRenewingAndroid` - Auto-renewal status\\n- `purchaseStateAndroid` - Purchase state enum\\n- `isAcknowledgedAndroid` - Acknowledgment status\\n- `packageNameAndroid` - App package name\\n- `developerPayloadAndroid` - Developer payload\\n- `obfuscatedAccountIdAndroid` - Obfuscated account ID\\n- `obfuscatedProfileIdAndroid` - Obfuscated profile ID\\n\\n### Request Props\\n\\n**RequestPurchaseAndroidProps:**\\n\\n- `isOfferPersonalized` - For Android Billing V5 personalized pricing\\n\\n**No Breaking Changes** - All Android fields maintain existing naming convention.\\n\\n## How to Migrate\\n\\n### Step 1: Update Field References\\n\\nSearch your codebase for any references to the old field names and update them:\\n\\n```typescript\\n// Before (v2.7.x)\\nconst purchase = await requestPurchase({sku: \'product-id\'});\\nif (purchase.expirationDateIos) {\\n  console.log(\'Expires:\', purchase.expirationDateIos);\\n}\\n\\n// After (v2.8.0)\\n// Note: requestPurchase API signature has also changed in v2.8.0\\nconst purchase = await requestPurchase({\\n  request: {\\n    ios: {sku: \'product-id\'},\\n    android: {skus: [\'product-id\']},\\n  },\\n  type: \'inapp\',\\n});\\nif (purchase.expirationDateIOS) {\\n  console.log(\'Expires:\', purchase.expirationDateIOS);\\n}\\n```\\n\\n### Step 2: Update Type Imports and Declarations\\n\\nType names have also been updated to use uppercase `IOS`:\\n\\n```typescript\\n// Before (v2.7.x)\\nimport {\\n  ProductIOS,\\n  ProductPurchaseIos,\\n  SubscriptionProductIOS,\\n  ProductStatusIos,\\n} from \'expo-iap\';\\n\\n// After (v2.8.0)\\nimport {\\n  ProductIOS,\\n  ProductPurchaseIOS,\\n  SubscriptionProductIOS,\\n  ProductStatusIOS,\\n} from \'expo-iap\';\\n```\\n\\n**Note:** The old type names are still available as deprecated aliases for backward compatibility, but we recommend updating to the new names.\\n\\n### Step 3: Update Type Checks\\n\\nIf you\'re using TypeScript and checking for iOS-specific fields:\\n\\n```typescript\\n// Before (v2.7.x)\\nif (\'expirationDateIos\' in purchase) {\\n  // Handle subscription\\n}\\n\\n// After (v2.8.0)\\nif (\'expirationDateIOS\' in purchase) {\\n  // Handle subscription\\n}\\n```\\n\\n### Step 4: Update ID Field References\\n\\nUpdate all ID field references to use `Id` instead:\\n\\n```typescript\\n// Before (v2.7.x)\\nconst appTransaction = await getAppTransactionIOS();\\nconsole.log(appTransaction.bundleID);\\nconsole.log(appTransaction.appID);\\n\\n// After (v2.8.0)\\nconst appTransaction = await getAppTransactionIOS();\\nconsole.log(appTransaction.bundleId);\\nconsole.log(appTransaction.appId);\\n```\\n\\n### Step 5: Update Subscription Helpers\\n\\nIf you\'re using the subscription helper functions:\\n\\n```typescript\\n// Before (v2.7.x)\\nconst subscription = {\\n  expirationDateIos: purchase.expirationDateIos,\\n  environmentIos: purchase.environmentIos,\\n};\\n\\n// After (v2.8.0)\\nconst subscription = {\\n  expirationDateIOS: purchase.expirationDateIOS,\\n  environmentIOS: purchase.environmentIOS,\\n};\\n```\\n\\n## Quick Migration Script\\n\\nYou can use this regex find/replace pattern in your IDE to quickly update most occurrences:\\n\\n**Find Pattern (Regex):**\\n\\n```text\\n\\\\b(\\\\w+)(Ios)\\\\b\\n```\\n\\n**Replace Pattern:**\\n\\n```text\\n$1IOS\\n```\\n\\n\u26a0\ufe0f **Note:** Review each replacement carefully as this might affect non-field references.\\n\\n## Why This Change?\\n\\nThese changes align with widely-adopted naming conventions:\\n\\n1. **iOS suffix**: Acronyms at the end of identifiers are written in uppercase (e.g., `dataIOS`, `configIOS`)\\n2. **ID suffix**: The `Id` convention is more common in modern JavaScript/TypeScript codebases (e.g., `userId`, `productId`, `transactionId`)\\n\\nThis makes the codebase more consistent and follows best practices in the TypeScript/JavaScript ecosystem.\\n\\n## Need Help?\\n\\nIf you encounter any issues during migration:\\n\\n- Check our [GitHub Issues](https://github.com/hyochan/expo-iap/issues)\\n- Join our [Slack community](https://hyo.dev/joinSlack)\\n- Review the [full documentation](https://expo-iap.hyo.dev)"},{"id":"v2-7-3-release","metadata":{"permalink":"/blog/v2-7-3-release","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-07-24-v2-7-3-release.md","source":"@site/blog/2025-07-24-v2-7-3-release.md","title":"v2.7.3 Release - Google Play Billing Library v8.0.0 Support","description":"We\'re excited to announce the release of expo-iap v2.7.3, which brings full support for Google Play Billing Library v8.0.0! This update ensures compatibility with the latest Android billing features and improved error handling.","date":"2025-07-24T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Android","permalink":"/blog/tags/android","description":"Android platform specific features"},{"inline":true,"label":"billing","permalink":"/blog/tags/billing"},{"inline":true,"label":"kotlin","permalink":"/blog/tags/kotlin"}],"readingTime":1.75,"hasTruncateMarker":false,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"v2-7-3-release","title":"v2.7.3 Release - Google Play Billing Library v8.0.0 Support","authors":["hyochan"],"tags":["release","android","billing","kotlin"]},"unlisted":false,"prevItem":{"title":"v2.8.0 Migration Guide - iOS Field Naming Convention Update","permalink":"/blog/v2-8-0-migration-guide"},"nextItem":{"title":"2.7.0 - New Platform API & Google Play Billing v8","permalink":"/blog/v2-7-0-release"}},"content":"We\'re excited to announce the release of expo-iap v2.7.3, which brings full support for Google Play Billing Library v8.0.0! This update ensures compatibility with the latest Android billing features and improved error handling.\\n\\n## \ud83d\ude80 What\'s New\\n\\n### Google Play Billing Library v8.0.0 Support\\n\\n- **Upgraded billing library** from v7.0.0 to v8.0.0\\n- **Enhanced error handling** with sub-response codes for better debugging\\n- **Improved API compatibility** with updated callback signatures\\n\\n### Key Changes\\n\\n- Updated `queryProductDetailsAsync` callback to use `QueryProductDetailsResult`\\n- Enhanced `enablePendingPurchases` with proper parameter configuration\\n- Removed deprecated hardcoded Kotlin version constraints\\n\\n## \u26a0\ufe0f Breaking Changes\\n\\n### Android Kotlin Version Requirement\\n\\n**Important:** Google Play Billing Library v8.0.0 requires Kotlin 2.0+, but `expo-modules-core` doesn\'t support Kotlin v2 yet. You need to configure your project with `expo-build-properties`:\\n\\n```json\\n{\\n  \\"expo\\": {\\n    \\"plugins\\": [\\n      [\\n        \\"expo-build-properties\\",\\n        {\\n          \\"android\\": {\\n            \\"kotlinVersion\\": \\"2.0.21\\"\\n          }\\n        }\\n      ]\\n    ]\\n  }\\n}\\n```\\n\\n## \ud83d\udce6 Installation\\n\\nIf you\'re upgrading to v2.7.3:\\n\\n```bash\\nnpx expo install expo-iap@2.7.3\\n```\\n\\nDon\'t forget to add the `expo-build-properties` configuration to your `app.json` if you haven\'t already!\\n\\n## \ud83d\udd27 Migration Guide\\n\\n### For Existing Projects\\n\\n1. Update to expo-iap v2.7.3\\n2. Add `expo-build-properties` plugin configuration to your `app.json`\\n3. Run `npx expo prebuild --clean` to regenerate native code\\n4. Test your purchase flows to ensure everything works correctly\\n\\n### Why This Change?\\n\\nGoogle Play Billing Library v8.0.0 introduces several improvements:\\n\\n- Better error handling with detailed sub-response codes\\n- Enhanced product fetching with unfetched product tracking\\n- Improved security and performance\\n\\nHowever, it requires Kotlin 2.0+, which conflicts with expo-modules-core\'s current Kotlin version requirements. The expo-build-properties solution provides a clean workaround until expo-modules-core supports Kotlin v2.\\n\\n## \ud83d\udcda Documentation Updates\\n\\nWe\'ve updated our documentation to include:\\n\\n- Android configuration section with step-by-step setup\\n- Kotlin version requirement explanation\\n- expo-build-properties configuration guide\\n\\nVisit our [installation guide](https://expo-iap.hyo.dev/docs/installation) for complete setup instructions.\\n\\n## \ud83d\ude4f Acknowledgments\\n\\nThanks to the community for reporting the billing library compatibility issues and helping us test the Kotlin version solutions. Your feedback makes expo-iap better for everyone!\\n\\n---\\n\\nAs always, if you encounter any issues or have feedback, please [open an issue](https://github.com/hyochan/expo-iap/issues) on GitHub.\\n\\nHappy coding! \ud83c\udf89"},{"id":"v2-7-0-release","metadata":{"permalink":"/blog/v2-7-0-release","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-07-23-v2-7-0-release.md","source":"@site/blog/2025-07-23-v2-7-0-release.md","title":"2.7.0 - New Platform API & Google Play Billing v8","description":"We\'re excited to announce expo-iap v2.7.0! This release includes a cleaner platform-specific API for handling purchases and full support for Google Play Billing Library v8.0.0.","date":"2025-07-23T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"API","permalink":"/blog/tags/api","description":"API updates and changes"},{"inline":false,"label":"Breaking Changes","permalink":"/blog/tags/breaking-changes","description":"Updates that require code changes"},{"inline":false,"label":"Android","permalink":"/blog/tags/android","description":"Android platform specific features"},{"inline":false,"label":"Google Play Billing","permalink":"/blog/tags/google-play-billing","description":"Google Play Billing Library updates"}],"readingTime":4.33,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"v2-7-0-release","title":"2.7.0 - New Platform API & Google Play Billing v8","authors":["hyochan"],"tags":["release","api","breaking-changes","android","google-play-billing"]},"unlisted":false,"prevItem":{"title":"v2.7.3 Release - Google Play Billing Library v8.0.0 Support","permalink":"/blog/v2-7-3-release"},"nextItem":{"title":"2.6.3 - iOS AppTransaction Support","permalink":"/blog/v2-6-3-release"}},"content":"We\'re excited to announce expo-iap v2.7.0! This release includes a cleaner platform-specific API for handling purchases and full support for Google Play Billing Library v8.0.0.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udfaf New Platform-Specific API\\n\\n### The Problem\\n\\nPreviously, developers had to write conditional logic to handle platform differences:\\n\\n```tsx\\n// Old approach - requires platform checks\\nif (Platform.OS === \'ios\') {\\n  await requestPurchase({\\n    request: {sku: productId},\\n  });\\n} else {\\n  await requestPurchase({\\n    request: {skus: [productId]},\\n  });\\n}\\n```\\n\\nThis approach had several issues:\\n\\n- Required manual platform checks\\n- Easy to miss platform-specific parameters\\n- TypeScript couldn\'t provide proper platform-specific type hints\\n\\n### The Solution: Platform-Specific Parameters\\n\\nThe new API introduces a cleaner structure with explicit platform parameters:\\n\\n```tsx\\n// New approach - clear platform separation\\nawait requestPurchase({\\n  request: {\\n    ios: {\\n      sku: productId,\\n      appAccountToken: \'user-123\',\\n    },\\n    android: {\\n      skus: [productId],\\n      obfuscatedAccountIdAndroid: \'user-123\',\\n    },\\n  },\\n});\\n```\\n\\n### Key Benefits\\n\\n1. **Better Type Safety**: TypeScript now provides accurate autocompletion for each platform\'s specific parameters\\n2. **Clearer Code Structure**: Platform-specific logic is clearly separated\\n3. **Backward Compatibility**: The old API still works, so you can migrate at your own pace\\n\\n### Migration Examples\\n\\n#### Basic Product Purchase\\n\\n**Before:**\\n\\n```tsx\\nconst buyProduct = async (productId: string) => {\\n  if (Platform.OS === \'ios\') {\\n    await requestPurchase({\\n      request: {sku: productId},\\n    });\\n  } else {\\n    await requestPurchase({\\n      request: {skus: [productId]},\\n    });\\n  }\\n};\\n```\\n\\n**After:**\\n\\n```tsx\\nconst buyProduct = async (productId: string) => {\\n  await requestPurchase({\\n    request: {\\n      ios: {sku: productId},\\n      android: {skus: [productId]},\\n    },\\n  });\\n};\\n```\\n\\n#### Subscription Purchase\\n\\n**Before:**\\n\\n```tsx\\nconst buySubscription = async (subId: string) => {\\n  if (Platform.OS === \'ios\') {\\n    await requestPurchase({\\n      request: {\\n        sku: subId,\\n        appAccountToken: \'user-123\',\\n      },\\n      type: \'subs\',\\n    });\\n  } else {\\n    const subscription = subscriptions.find((s) => s.id === subId);\\n    const offer = subscription?.subscriptionOfferDetails?.[0];\\n\\n    await requestPurchase({\\n      request: {\\n        skus: [subId],\\n        subscriptionOffers: [\\n          {\\n            sku: subId,\\n            offerToken: offer?.offerToken || \'\',\\n          },\\n        ],\\n      },\\n      type: \'subs\',\\n    });\\n  }\\n};\\n```\\n\\n**After:**\\n\\n```tsx\\nconst buySubscription = async (subId: string) => {\\n  const subscription = subscriptions.find((s) => s.id === subId);\\n\\n  await requestPurchase({\\n    request: {\\n      ios: {\\n        sku: subId,\\n        appAccountToken: \'user-123\',\\n      },\\n      android: {\\n        skus: [subId],\\n        subscriptionOffers:\\n          subscription?.subscriptionOfferDetails?.map((offer) => ({\\n            sku: subId,\\n            offerToken: offer.offerToken,\\n          })) || [],\\n      },\\n    },\\n    type: \'subs\',\\n  });\\n};\\n```\\n\\n### Platform-Specific Parameters\\n\\n#### iOS Parameters\\n\\n```tsx\\n{\\n  ios: {\\n    sku: string;                                        // Required: Product SKU\\n    andDangerouslyFinishTransactionAutomatically?: boolean;\\n    appAccountToken?: string;                           // For server validation\\n    quantity?: number;                                  // For bulk purchases\\n    withOffer?: PaymentDiscount;                        // For discounts\\n  }\\n}\\n```\\n\\n#### Android Parameters\\n\\n```tsx\\n{\\n  android: {\\n    skus: string[];                                     // Required: Product SKUs\\n    obfuscatedAccountIdAndroid?: string;                // User identifier\\n    obfuscatedProfileIdAndroid?: string;                // Profile identifier\\n    isOfferPersonalized?: boolean;                      // For personalized pricing\\n\\n    // For subscriptions only:\\n    subscriptionOffers?: Array<{\\n      sku: string;\\n      offerToken: string;\\n    }>;\\n    purchaseTokenAndroid?: string;                      // For upgrades/downgrades\\n    replacementModeAndroid?: number;                    // Proration mode\\n  }\\n}\\n```\\n\\n## \ud83d\udd04 Deprecation Notice: requestSubscription\\n\\nStarting from v2.7.0, `requestSubscription` is deprecated in favor of using `requestPurchase` with `type: \'subs\'`. This unifies our API and makes the codebase cleaner.\\n\\n**Migration example:**\\n\\n```tsx\\n// Old way (deprecated)\\nawait requestSubscription({\\n  sku: subscriptionId,\\n  skus: [subscriptionId],\\n});\\n\\n// New way (recommended)\\nawait requestPurchase({\\n  request: {\\n    ios: {sku: subscriptionId},\\n    android: {skus: [subscriptionId]},\\n  },\\n  type: \'subs\',\\n});\\n```\\n\\n## \ud83e\udd16 Google Play Billing Library v8.0.0 Support\\n\\nWe\'ve updated to Google Play Billing Library v8.0.0 to meet Google Play\'s latest requirements. For more details on the migration, see [Google\'s official migration guide](https://developer.android.com/google/play/billing/migrate-gpblv8).\\n\\n### Key Changes\\n\\n#### 1. Updated Dependencies\\n\\nThe Android module now uses the latest Google Play Billing Library:\\n\\n```gradle\\nimplementation \\"com.android.billingclient:billing-ktx:8.0.0\\"\\n```\\n\\n#### 2. Removed Deprecated Methods\\n\\n> getPurchaseHistory is no longer available on Android\\n\\nGoogle Play Billing Library v8 has removed the `queryPurchaseHistoryAsync()` method. The `getPurchaseHistories()` function will now return an empty array on Android with a console warning:\\n\\n```typescript\\n// Before v8\\nconst history = await getPurchaseHistories(); // Returns purchase history\\n\\n// After v8\\nconst history = await getPurchaseHistories(); // Returns [] on Android with warning\\n// Use getAvailablePurchases() instead for active purchases\\n```\\n\\n#### 3. Automatic Service Reconnection\\n\\nThe library now includes automatic service reconnection support, improving reliability when the billing service disconnects unexpectedly.\\n\\n#### 4. Sub-Response Codes\\n\\nThe library now provides more detailed error information through sub-response codes:\\n\\n```javascript\\n// Error object now includes sub-response codes\\n{\\n  responseCode: 6, // ERROR\\n  debugMessage: \\"Error processing purchase\\",\\n  subResponseCode: 1, // PAYMENT_DECLINED_DUE_TO_INSUFFICIENT_FUNDS\\n  subResponseMessage: \\"Payment declined due to insufficient funds\\"\\n}\\n```\\n\\n### Breaking Changes Summary\\n\\n1. **`getPurchaseHistory()` removed** - Use `getAvailablePurchases()` instead\\n2. **`querySkuDetailsAsync()` removed** - Already migrated to `queryProductDetailsAsync()`\\n3. **`enablePendingPurchases()` signature changed** - Now requires `PendingPurchasesParams`\\n4. **`queryPurchasesAsync(skuType)` removed** - Use `queryPurchasesAsync(QueryPurchasesParams)` instead\\n\\n### Migration Guide for getPurchaseHistory\\n\\nIf you\'re using `getPurchaseHistory()` or `getPurchaseHistories()` on Android:\\n\\n```typescript\\n// Old approach\\nconst history = await getPurchaseHistories();\\n\\n// New approach - use getAvailablePurchases for active purchases\\nconst activePurchases = await getAvailablePurchases();\\n```\\n\\n## \ud83d\ude80 Best Practices\\n\\n1. **Handle Platform Availability**: Not all parameters need to be set for both platforms\\n\\n   ```tsx\\n   await requestPurchase({\\n     request: {\\n       ios: {sku: productId},\\n       android: {skus: [productId]},\\n     },\\n   });\\n   ```\\n\\n2. **Use TypeScript**: Let TypeScript guide you with autocompletion\\n\\n   ```tsx\\n   await requestPurchase({\\n     request: {\\n       ios: {\\n         // TypeScript will show iOS-specific options\\n       },\\n       android: {\\n         // TypeScript will show Android-specific options\\n       },\\n     },\\n   });\\n   ```\\n\\n3. **Gradual Migration**: The old API still works, migrate at your own pace\\n\\n## \ud83d\udce6 Upgrading\\n\\nTo upgrade to version 2.7.0:\\n\\n```bash\\nnpm install expo-iap@2.7.0\\n# or\\nyarn add expo-iap@2.7.0\\n# or\\nbun add expo-iap@2.7.0\\n```\\n\\n### Requirements\\n\\n- Android Gradle Plugin 4.0 or higher\\n- Kotlin 1.6 or higher\\n- JVM target 17 (automatically configured)\\n- Google Play\'s latest billing requirements (deadline: August 31, 2025)\\n\\n## \ud83c\udf89 Benefits\\n\\n- **Cleaner Code**: No more Platform.OS checks in your purchase logic\\n- **Better Type Safety**: Platform-specific TypeScript hints\\n- **Future-Proof**: Compliance with Google Play\'s latest requirements\\n- **Improved Reliability**: Automatic service reconnection on Android\\n- **Enhanced Error Handling**: Detailed sub-response codes\\n\\n## \ud83d\udcda Documentation\\n\\n- Check our [updated documentation](/docs/guides/purchases)\\n- View [complete examples](https://github.com/hyochan/expo-iap/tree/main/example)\\n- Join our [community discussions](https://github.com/hyochan/expo-iap/discussions)\\n\\n## \ud83d\udcac Feedback\\n\\nIf you encounter any issues with this update, please [open an issue](https://github.com/hyochan/expo-iap/issues) on our GitHub repository.\\n\\nHappy coding! \ud83d\ude80"},{"id":"v2-6-3-release","metadata":{"permalink":"/blog/v2-6-3-release","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-07-22-v2-6-3-release.md","source":"@site/blog/2025-07-22-v2-6-3-release.md","title":"2.6.3 - iOS AppTransaction Support","description":"We\'re excited to announce the release of expo-iap version 2.6.3, which includes critical fixes for iOS AppTransaction functionality.","date":"2025-07-22T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"iOS","permalink":"/blog/tags/ios","description":"iOS platform specific features"},{"inline":false,"label":"App Transaction","permalink":"/blog/tags/apptransaction","description":"App transaction related features"}],"readingTime":1.88,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"v2-6-3-release","title":"2.6.3 - iOS AppTransaction Support","authors":["hyochan"],"tags":["release","ios","apptransaction"]},"unlisted":false,"prevItem":{"title":"2.7.0 - New Platform API & Google Play Billing v8","permalink":"/blog/v2-7-0-release"},"nextItem":{"title":"2.6.0 - Major iOS Improvements","permalink":"/blog/v2-6-0-release"}},"content":"We\'re excited to announce the release of expo-iap version 2.6.3, which includes critical fixes for iOS AppTransaction functionality.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What\'s New\\n\\n### Complete AppTransaction Properties\\n\\nThe `getAppTransactionIOS()` function now returns all properties available from Apple\'s StoreKit 2 AppTransaction API:\\n\\n```typescript\\nexport type AppTransactionIOS = {\\n  appTransactionID: string;\\n  bundleID: string;\\n  appVersion: string;\\n  originalAppVersion: string;\\n  originalPurchaseDate: number;\\n  deviceVerification: string;\\n  deviceVerificationNonce: string;\\n  environment: string;\\n  signedDate: number;\\n  appID?: number;\\n  appVersionID?: number;\\n  originalPlatform: string;\\n  preorderDate?: number;\\n};\\n```\\n\\n### Key Properties Added\\n\\n- **`appTransactionID`**: The unique identifier for the app transaction\\n- **`environment`**: Indicates whether the transaction occurred in Production, Sandbox, or Xcode environment\\n- **`signedDate`**: The date when the transaction was signed\\n- **`appID`** and **`appVersionID`**: App Store identifiers for the app and version\\n- **`originalPlatform`**: The platform where the app was originally purchased\\n- **`preorderDate`**: Available when the app was pre-ordered\\n\\n## Usage Example\\n\\n```typescript\\nimport {getAppTransactionIOS} from \'expo-iap\';\\n\\nconst getAppPurchaseInfo = async () => {\\n  try {\\n    const appTransaction = await getAppTransactionIOS();\\n\\n    console.log(\'App Transaction ID:\', appTransaction.appTransactionID);\\n    console.log(\'Environment:\', appTransaction.environment);\\n    console.log(\\n      \'Original Purchase Date:\',\\n      new Date(appTransaction.originalPurchaseDate),\\n    );\\n\\n    // Check if app was pre-ordered\\n    if (appTransaction.preorderDate) {\\n      console.log(\'Pre-order Date:\', new Date(appTransaction.preorderDate));\\n    }\\n  } catch (error) {\\n    console.error(\'Failed to get app transaction:\', error);\\n  }\\n};\\n```\\n\\n## Why This Matters\\n\\nThe AppTransaction API provides crucial information about the app\'s purchase and installation:\\n\\n- **Verify app authenticity**: Use the device verification data to ensure the app is legitimate\\n- **Track installation source**: Determine if the app was purchased, redeemed, or installed via TestFlight\\n- **Environment detection**: Easily identify if you\'re running in production or sandbox\\n- **Pre-order support**: Handle pre-ordered apps appropriately\\n\\n## Requirements\\n\\n- iOS 16.0 or later\\n- The function will throw an error on older iOS versions\\n\\n## Bug Fixes\\n\\nThis release also includes:\\n\\n- Fixed missing properties in AppTransaction type definition\\n- Corrected property names to match Apple\'s API exactly\\n- Fixed TypeScript type exports\\n- Fixed iOS build errors for `appTransactionID` and `preorderDate` mapping\\n- Made `originalPlatform` optional as it\'s only available in iOS 18.4+\\n\\n## Upgrading\\n\\nTo upgrade to version 2.6.3:\\n\\n```bash\\nnpm install expo-iap@2.6.3\\n# or\\nyarn add expo-iap@2.6.3\\n# or\\nbun add expo-iap@2.6.3\\n```\\n\\n## What\'s Next\\n\\nWe\'re continuing to improve the iOS integration and will be adding more StoreKit 2 features in upcoming releases. Stay tuned!\\n\\n## Feedback\\n\\nIf you encounter any issues or have suggestions, please [open an issue](https://github.com/hyochan/expo-iap/issues) on our GitHub repository.\\n\\nHappy coding! \ud83d\ude80"},{"id":"v2-6-0-release","metadata":{"permalink":"/blog/v2-6-0-release","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-07-21-v2-6-0-release.md","source":"@site/blog/2025-07-21-v2-6-0-release.md","title":"2.6.0 - Major iOS Improvements","description":"We\'re excited to announce the release of expo-iap v2.6.0! This release brings significant improvements to iOS functionality, better TypeScript support, and enhanced developer experience.","date":"2025-07-21T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"iOS","permalink":"/blog/tags/ios","description":"iOS platform specific features"},{"inline":false,"label":"TypeScript","permalink":"/blog/tags/typescript","description":"TypeScript type definitions and improvements"},{"inline":false,"label":"Breaking Changes","permalink":"/blog/tags/breaking-changes","description":"Updates that require code changes"}],"readingTime":3.92,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"v2-6-0-release","title":"2.6.0 - Major iOS Improvements","authors":["hyochan"],"tags":["release","ios","typescript","breaking-changes"],"date":"2025-07-21T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"2.6.3 - iOS AppTransaction Support","permalink":"/blog/v2-6-3-release"},"nextItem":{"title":"Welcome to Expo IAP Documentation","permalink":"/blog/welcome-to-expo-iap"}},"content":"import AdFitTopFixed from \\"@site/src/uis/AdFitTopFixed\\";\\n\\n\\n<AdFitTopFixed />\\n\\nWe\'re excited to announce the release of expo-iap v2.6.0! This release brings significant improvements to iOS functionality, better TypeScript support, and enhanced developer experience.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udf89 What\'s New\\n\\n### 1. Proper iOS Subscription Data Serialization\\n\\nThe biggest improvement in this release is the proper serialization of iOS subscription data. Previously, the `subscription` field would return undefined for subscription products. Now, all subscription information is properly serialized and accessible.\\n\\n#### Before (v2.5.x)\\n\\n```typescript\\nconst subscriptions = await getSubscriptions([\'com.example.premium\']);\\nconsole.log(subscriptions[0].subscription); // undefined \ud83d\ude22\\n```\\n\\n#### After (v2.6.0)\\n\\n```typescript\\nconst subscriptions = await getSubscriptions([\'com.example.premium\']);\\nconsole.log(subscriptions[0].subscription); // \u2705 Full subscription data!\\n```\\n\\n### 2. Improved Type Structure\\n\\nWe\'ve restructured how period information is returned to be more consistent and useful. The `period` and `subscriptionPeriod` properties now return objects with `unit` and `value` properties instead of just the unit string.\\n\\n**Before (v2.5.x):**\\n\\n```typescript\\ntype SubscriptionInfo = {\\n  subscriptionPeriod: SubscriptionIosPeriod; // \'DAY\' | \'WEEK\' | \'MONTH\' | \'YEAR\'\\n};\\n```\\n\\n**After (v2.6.0):**\\n\\n```typescript\\ntype SubscriptionInfo = {\\n  subscriptionPeriod: {\\n    unit: SubscriptionIosPeriod; // \'DAY\' | \'WEEK\' | \'MONTH\' | \'YEAR\'\\n    value: number; // e.g., 1, 3, 6, 12\\n  };\\n};\\n```\\n\\nThis change provides more detailed information about subscription periods. For example, instead of just knowing a subscription is \\"MONTH\\", you now know if it\'s \\"1 MONTH\\", \\"3 MONTHS\\", etc.\\n\\n### 3. New getStorefront() API\\n\\nGet the user\'s App Store country code:\\n\\n```typescript\\nimport {getStorefront} from \'expo-iap\';\\n\\nconst countryCode = await getStorefront();\\nconsole.log(\'User storefront:\', countryCode); // \'US\', \'GB\', \'JP\', etc.\\n```\\n\\n### 4. AppTransaction Support (iOS 16.0+)\\n\\nFor premium apps or apps that were previously paid, you can now verify the initial app purchase:\\n\\n```typescript\\nimport {getAppTransaction} from \'expo-iap\';\\n\\nconst appTransaction = await getAppTransaction();\\nif (appTransaction) {\\n  console.log(\'App Transaction ID:\', appTransaction.appTransactionID);\\n  console.log(\'Purchase Date:\', new Date(appTransaction.originalPurchaseDate));\\n  // Send deviceVerification to your server for validation\\n}\\n```\\n\\n### 5. Comprehensive iOS Subscription Offers Documentation\\n\\nWe\'ve added extensive documentation for handling iOS subscription offers:\\n\\n- Understanding introductory and promotional offers\\n- Checking user eligibility\\n- Implementing offer UI\\n- Best practices and troubleshooting\\n\\nCheck out the new [iOS Subscription Offers Guide](/docs/guides/ios-subscription-offers).\\n\\n## \u26a0\ufe0f Breaking Changes\\n\\n### 1. Period Structure Changes\\n\\nThe `period` and `subscriptionPeriod` properties now return objects with `unit` and `value` properties:\\n\\n```typescript\\n// Before\\nif (offer.period === \'MONTH\') {\\n  console.log(\'Monthly offer\');\\n}\\n\\n// After\\nif (offer.period.unit === \'MONTH\') {\\n  console.log(`${offer.period.value} month(s) offer`);\\n}\\n```\\n\\n### 2. Optional Subscription Field\\n\\nThe `subscription` field in `ProductIOS` is now optional to reflect that not all iOS products have subscription information:\\n\\n```typescript\\n// Before\\ntype ProductIOS = {\\n  subscription: SubscriptionInfo; // Always required\\n};\\n\\n// After\\ntype ProductIOS = {\\n  subscription?: SubscriptionInfo; // Optional - only present for subscriptions\\n};\\n```\\n\\n**Migration:** Update your code to handle the optional subscription field:\\n\\n```typescript\\n// Check if product is a subscription\\nif (product.subscription) {\\n  // Handle subscription-specific logic\\n  console.log(\'Period:\', product.subscription.subscriptionPeriod);\\n}\\n```\\n\\n### 3. Method Naming Update\\n\\nTo improve consistency, we\'ve updated the purchase history method naming:\\n\\n- **Deprecated**: `getPurchaseHistory()` (singular)\\n- **New**: `getPurchaseHistories()` (plural)\\n\\nThe `useIAP` hook already uses the plural form:\\n\\n```typescript\\nconst {purchaseHistories, getPurchaseHistories} = useIAP();\\n```\\n\\n## \ud83d\udccb Complete Example\\n\\nHere\'s a complete example showing how to work with the new types:\\n\\n```typescript\\nimport {useIAP} from \'expo-iap\';\\n\\nfunction ProductList() {\\n  const {products} = useIAP();\\n\\n  return (\\n    <View>\\n      {products.map((product) => (\\n        <View key={product.productId}>\\n          <Text>{product.displayName}</Text>\\n          <Text>{product.localizedPrice}</Text>\\n\\n          {product.subscription && (\\n            <View>\\n              <Text>\\n                Subscription Period:{\' \'}\\n                {product.subscription.subscriptionPeriod.value}{\' \'}\\n                {product.subscription.subscriptionPeriod.unit.toLowerCase()}(s)\\n              </Text>\\n\\n              {product.subscription.introductoryOffer && (\\n                <Text>\\n                  Intro Offer:{\' \'}\\n                  {product.subscription.introductoryOffer.displayPrice} for{\' \'}\\n                  {product.subscription.introductoryOffer.period.value}{\' \'}\\n                  {product.subscription.introductoryOffer.period.unit.toLowerCase()}\\n                  (s)\\n                </Text>\\n              )}\\n            </View>\\n          )}\\n        </View>\\n      ))}\\n    </View>\\n  );\\n}\\n```\\n\\n## \ud83d\udc1b Bug Fixes\\n\\n- Fixed iOS subscription data not being properly serialized\\n- Fixed period information returning raw values instead of structured data\\n- Improved error handling for platform-specific methods\\n- Fixed inconsistent naming between `getPurchaseHistory` and `purchaseHistories`\\n\\n## \ud83d\udcda Documentation Updates\\n\\n- Added iOS Subscription Offers guide\\n- Updated type definitions documentation\\n- Added examples for new APIs\\n- Improved troubleshooting section\\n- Updated migration guide for naming consistency\\n\\n## \ud83d\udcaa Benefits\\n\\nThese improvements provide several benefits:\\n\\n1. **Better Type Safety**: The TypeScript compiler can now catch more potential errors at compile time\\n2. **More Accurate Data**: Period information now includes both unit and value, providing complete subscription duration details\\n3. **Clearer Intent**: Optional types make it explicit which products are subscriptions\\n4. **Consistent API**: Naming conventions are now consistent throughout the library\\n5. **Future-Proof**: These changes align better with Apple\'s StoreKit 2 data structures\\n\\n## \ud83d\ude4f Acknowledgments\\n\\nSpecial thanks to:\\n\\n- [@Navipro70](https://github.com/Navipro70) for identifying the subscription serialization issue and providing valuable feedback\\n- [@matthieuMay](https://github.com/matthieuMay) for the initial iOS type improvements\\n- All contributors who helped test and improve this release\\n\\n## \ud83d\udce6 Installation\\n\\nUpdate to the latest version:\\n\\n```bash\\nnpm install expo-iap@2.6.0\\n# or\\nyarn add expo-iap@2.6.0\\n```\\n\\n## \ud83d\udd17 Links\\n\\n- [Full Changelog](https://github.com/hyochan/expo-iap/releases/tag/v2.6.0)\\n- [iOS Subscription Offers Guide](/docs/guides/ios-subscription-offers)\\n- [API Reference](/docs/api/methods/core-methods)\\n- [Migration Guide](/docs/guides/migration)\\n\\n## What\'s Next?\\n\\nWe\'re working on:\\n\\n- Android subscription offers improvements\\n- Better error messages and debugging tools\\n- Performance optimizations\\n- More comprehensive examples\\n\\nStay tuned for more updates! If you have any feedback or suggestions, please [open an issue](https://github.com/hyochan/expo-iap/issues).\\n\\nHappy coding! \ud83d\ude80"},{"id":"welcome-to-expo-iap","metadata":{"permalink":"/blog/welcome-to-expo-iap","editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/blog/2025-06-01-welcome-to-expo-iap.md","source":"@site/blog/2025-06-01-welcome-to-expo-iap.md","title":"Welcome to Expo IAP Documentation","description":"Welcome to the official documentation site for Expo IAP! \ud83c\udf89","date":"2025-06-01T00:00:00.000Z","tags":[{"inline":false,"label":"Expo IAP","permalink":"/blog/tags/expo-iap","description":"In-app purchase library for Expo and React Native"},{"inline":false,"label":"In-App Purchase","permalink":"/blog/tags/in-app-purchase","description":"Mobile in-app purchase implementation"},{"inline":false,"label":"React Native","permalink":"/blog/tags/react-native","description":"React Native development"}],"readingTime":0.61,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Expo IAP Maintainer","url":"https://github.com/hyochan","page":{"permalink":"/blog/authors/hyochan"},"socials":{"github":"https://github.com/hyochan","linkedin":"https://www.linkedin.com/in/hyochanjang/","x":"https://x.com/hyodotdev"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"welcome-to-expo-iap","title":"Welcome to Expo IAP Documentation","authors":["hyochan"],"tags":["expo-iap","in-app-purchase","react-native"],"date":"2025-06-01T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"2.6.0 - Major iOS Improvements","permalink":"/blog/v2-6-0-release"}},"content":"Welcome to the official documentation site for **Expo IAP**! \ud83c\udf89\\n\\nWe\'re excited to share this comprehensive resource for developers looking to implement in-app purchases in their Expo and React Native applications.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What\'s New\\n\\nThis documentation site features:\\n\\n- **\ud83d\ude80 Quick Start Guide** - Get up and running in 5 minutes\\n- **\ud83d\udcf1 Platform-specific Setup** - Detailed guides for iOS and Android\\n- **\ud83c\udfa3 useIAP Hook API** - Complete API reference with examples\\n- **\u26a0\ufe0f Error Handling** - Centralized error code management\\n- **\ud83c\udfa8 Beautiful Design** - Clean, modern interface with oatmeal theme\\n\\n## Getting Started\\n\\nReady to add in-app purchases to your app? Start with our [installation guide](/docs/installation) and follow our step-by-step setup process.\\n\\nHave questions or feedback? We\'d love to hear from you on [GitHub](https://github.com/hyochan/expo-iap)!"}]}}')}}]);