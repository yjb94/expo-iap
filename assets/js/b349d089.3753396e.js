"use strict";(self.webpackChunkexpo_iap_docs=self.webpackChunkexpo_iap_docs||[]).push([[7558],{6065:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/error-handling","title":"Error Handling","description":"This guide covers best practices for handling errors in your expo-iap implementation.","source":"@site/versioned_docs/version-2.6/guides/error-handling.md","sourceDirName":"guides","slug":"/guides/error-handling","permalink":"/docs/2.6/guides/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/versioned_docs/version-2.6/guides/error-handling.md","tags":[],"version":"2.6","frontMatter":{}}');var o=n(4848),a=n(8453);const i={},t="Error Handling",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Error Structure",id:"error-structure",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:2},{value:"Network Errors",id:"network-errors",level:3},{value:"User Cancellation",id:"user-cancellation",level:3},{value:"Payment Issues",id:"payment-issues",level:3},{value:"Error Recovery Strategies",id:"error-recovery-strategies",level:2},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Graceful Degradation",id:"graceful-degradation",level:3},{value:"Logging and Analytics",id:"logging-and-analytics",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Handle Errors",id:"1-always-handle-errors",level:3},{value:"2. Provide User-Friendly Messages",id:"2-provide-user-friendly-messages",level:3},{value:"3. Handle Platform Differences",id:"3-handle-platform-differences",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"error-handling",children:"Error Handling"})}),"\n",(0,o.jsx)(r.p,{children:"This guide covers best practices for handling errors in your expo-iap implementation."}),"\n",(0,o.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(r.p,{children:"Expo IAP provides comprehensive error handling through standardized error codes and messages. All errors are returned as structured objects with consistent properties across iOS and Android platforms."}),"\n",(0,o.jsx)(r.h2,{id:"error-structure",children:"Error Structure"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"interface IapError {\n  code: string;\n  message: string;\n  debugMessage?: string;\n  underlyingError?: any;\n}\n"})}),"\n",(0,o.jsx)(r.h2,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,o.jsx)(r.h3,{id:"network-errors",children:"Network Errors"}),"\n",(0,o.jsx)(r.p,{children:"Handle network connectivity issues gracefully:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"import {useIAP} from 'expo-iap';\n\nconst {purchaseProduct} = useIAP();\n\ntry {\n  await purchaseProduct('product_id');\n} catch (error) {\n  if (error.code === 'E_NETWORK_ERROR') {\n    // Handle network issues\n    showRetryDialog();\n  }\n}\n"})}),"\n",(0,o.jsx)(r.h3,{id:"user-cancellation",children:"User Cancellation"}),"\n",(0,o.jsx)(r.p,{children:"Gracefully handle when users cancel purchases:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"try {\n  await purchaseProduct('product_id');\n} catch (error) {\n  if (error.code === 'E_USER_CANCELLED') {\n    // User cancelled the purchase\n    // Don't show error message, just continue\n    return;\n  }\n}\n"})}),"\n",(0,o.jsx)(r.h3,{id:"payment-issues",children:"Payment Issues"}),"\n",(0,o.jsx)(r.p,{children:"Handle various payment-related errors:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"try {\n  await purchaseProduct('product_id');\n} catch (error) {\n  switch (error.code) {\n    case 'E_PAYMENT_INVALID':\n      showMessage(\n        'Invalid payment method. Please check your payment settings.',\n      );\n      break;\n    case 'E_PAYMENT_NOT_ALLOWED':\n      showMessage('Payments are not allowed on this device.');\n      break;\n    case 'E_INSUFFICIENT_FUNDS':\n      showMessage('Insufficient funds. Please add payment method.');\n      break;\n    default:\n      showMessage('Purchase failed. Please try again.');\n  }\n}\n"})}),"\n",(0,o.jsx)(r.h2,{id:"error-recovery-strategies",children:"Error Recovery Strategies"}),"\n",(0,o.jsx)(r.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,o.jsx)(r.p,{children:"Implement exponential backoff for transient errors:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"const retryWithBackoff = async (fn: () => Promise<any>, maxRetries = 3) => {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (i === maxRetries - 1) throw error;\n\n      // Only retry on network or temporary errors\n      if (['E_NETWORK_ERROR', 'E_SERVICE_UNAVAILABLE'].includes(error.code)) {\n        await new Promise((resolve) =>\n          setTimeout(resolve, Math.pow(2, i) * 1000),\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n};\n"})}),"\n",(0,o.jsx)(r.h3,{id:"graceful-degradation",children:"Graceful Degradation"}),"\n",(0,o.jsx)(r.p,{children:"Provide fallback experiences:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"const handlePurchase = async (productId: string) => {\n  try {\n    await purchaseProduct(productId);\n  } catch (error) {\n    if (error.code === 'E_IAP_NOT_AVAILABLE') {\n      // Redirect to web subscription\n      redirectToWebPurchase(productId);\n    } else {\n      showErrorMessage(error.message);\n    }\n  }\n};\n"})}),"\n",(0,o.jsx)(r.h2,{id:"logging-and-analytics",children:"Logging and Analytics"}),"\n",(0,o.jsx)(r.p,{children:"Track errors for debugging and analytics:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"const trackError = (error: IapError, context: string) => {\n  console.error(`IAP Error in ${context}:`, error);\n\n  // Send to analytics\n  analytics.track('iap_error', {\n    error_code: error.code,\n    error_message: error.message,\n    context,\n    platform: Platform.OS,\n  });\n};\n"})}),"\n",(0,o.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(r.h3,{id:"1-always-handle-errors",children:"1. Always Handle Errors"}),"\n",(0,o.jsx)(r.p,{children:"Never leave IAP operations without error handling:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"// \u274c Bad\npurchaseProduct('product_id');\n\n// \u2705 Good\ntry {\n  await purchaseProduct('product_id');\n} catch (error) {\n  handlePurchaseError(error);\n}\n"})}),"\n",(0,o.jsx)(r.h3,{id:"2-provide-user-friendly-messages",children:"2. Provide User-Friendly Messages"}),"\n",(0,o.jsx)(r.p,{children:"Convert technical errors to user-friendly messages:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"const getUserFriendlyMessage = (error: IapError): string => {\n  switch (error.code) {\n    case 'E_USER_CANCELLED':\n      return null; // Don't show message\n    case 'E_NETWORK_ERROR':\n      return 'Please check your internet connection and try again.';\n    case 'E_PAYMENT_INVALID':\n      return 'There was an issue with your payment method.';\n    default:\n      return 'Something went wrong. Please try again later.';\n  }\n};\n"})}),"\n",(0,o.jsx)(r.h3,{id:"3-handle-platform-differences",children:"3. Handle Platform Differences"}),"\n",(0,o.jsx)(r.p,{children:"Some errors may be platform-specific:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"const handlePlatformSpecificError = (error: IapError) => {\n  if (\n    Platform.OS === 'ios' &&\n    error.code === 'E_STOREFRONT_COUNTRY_NOT_SUPPORTED'\n  ) {\n    showMessage('This product is not available in your country.');\n  } else if (Platform.OS === 'android' && error.code === 'E_DEVELOPER_ERROR') {\n    // Log for debugging but don't show to user\n    console.error('Google Play configuration error:', error);\n  }\n};\n"})}),"\n",(0,o.jsx)(r.h2,{id:"see-also",children:"See Also"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"../api/error-codes",children:"Error Codes Reference"})," - Complete list of error codes"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"../api/use-iap",children:"Use IAP Hook"})," - Main API documentation"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Common issues and solutions"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>t});var s=n(6540);const o={},a=s.createContext(o);function i(e){const r=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);