"use strict";(self.webpackChunkexpo_iap_docs=self.webpackChunkexpo_iap_docs||[]).push([[818],{571:(e,n,r)=>{r.d(n,{A:()=>a});var t=r(6540),s=r(4848);function i({className:e="adfit",style:n,unit:r,height:i,width:a}){return(0,t.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const t=n.querySelectorAll(".kakao_ad_area"),s=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');t.forEach(e=>e.remove()),s.forEach(e=>e.remove());const o=document.createElement("ins"),c=document.createElement("script");o.className="kakao_ad_area",o.style.cssText="display:none; width:100%;",c.async=!0,c.type="text/javascript",c.src="//t1.daumcdn.net/kas/static/ba.min.js",o.setAttribute("data-ad-width",a.toString()),o.setAttribute("data-ad-height",i.toString()),o.setAttribute("data-ad-unit",r),n.appendChild(o),n.appendChild(c)},100);return()=>clearTimeout(n)},[e,r,i,a]),(0,s.jsx)("div",{style:n,children:(0,s.jsx)("div",{className:e})})}function a(){return(0,s.jsx)(i,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},3885:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"examples/complete-impl","title":"Complete Implementation","description":"This example shows a real-world implementation of a complete in-app purchase store with both consumable products (bulb packs) and subscriptions (premium features).","source":"@site/versioned_docs/version-2.7/examples/complete-impl.md","sourceDirName":"examples","slug":"/examples/complete-impl","permalink":"/docs/2.7/examples/complete-impl","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/versioned_docs/version-2.7/examples/complete-impl.md","tags":[],"version":"2.7","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Subscriptions","permalink":"/docs/2.7/examples/subscription-manager"},"next":{"title":"Sponsors","permalink":"/docs/2.7/sponsors"}}');var s=r(4848),i=r(8453),a=r(571);const o={sidebar_position:3},c="Complete Implementation",l={},d=[{value:"Quick Start",id:"quick-start",level:2},{value:"1. Initialize the Connection",id:"1-initialize-the-connection",level:3},{value:"2. Fetch Products on Connection",id:"2-fetch-products-on-connection",level:3},{value:"3. Handle Purchases",id:"3-handle-purchases",level:3},{value:"4. Complete Transactions",id:"4-complete-transactions",level:3},{value:"Overview",id:"overview",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Platform Differences",id:"platform-differences",level:3},{value:"Consumable vs Non-Consumable",id:"consumable-vs-non-consumable",level:3},{value:"Receipt Validation",id:"receipt-validation",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Complete Implementation",id:"complete-implementation-1",level:2},{value:"Key Features Explained",id:"key-features-explained",level:2},{value:"1. Product Configuration",id:"1-product-configuration",level:3},{value:"2. Platform-Specific Purchase Handling",id:"2-platform-specific-purchase-handling",level:3},{value:"3. Receipt Validation",id:"3-receipt-validation",level:3},{value:"4. Error Handling",id:"4-error-handling",level:3},{value:"5. UI Components",id:"5-ui-components",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Best Practices",id:"best-practices-1",level:2},{value:"Testing",id:"testing",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"\ud83d\ude80 Setup &amp; Configuration",id:"-setup--configuration",level:3},{value:"\ud83d\udcd6 Learn More",id:"-learn-more",level:3},{value:"\ud83d\udd27 Advanced Topics",id:"-advanced-topics",level:3},{value:"\ud83e\uddea Testing",id:"-testing",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"complete-implementation",children:"Complete Implementation"})}),"\n",(0,s.jsx)(a.A,{}),"\n",(0,s.jsx)(n.p,{children:"This example shows a real-world implementation of a complete in-app purchase store with both consumable products (bulb packs) and subscriptions (premium features)."}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.h3,{id:"1-initialize-the-connection",children:"1. Initialize the Connection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'expo-iap';\n\nexport default function MyStore() {\n  const {\n    connected,\n    products,\n    subscriptions,\n    currentPurchase,\n    currentPurchaseError,\n    getProducts,\n    getSubscriptions,\n    requestPurchase,\n    finishTransaction,\n    validateReceipt,\n  } = useIAP();\n\n  // Your product SKUs\n  const productSkus = ['your.product.id'];\n  const subscriptionSkus = ['your.subscription.id'];\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-fetch-products-on-connection",children:"2. Fetch Products on Connection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  if (!connected) return;\n\n  const initializeStore = async () => {\n    try {\n      await getProducts(productSkus);\n      await getSubscriptions(subscriptionSkus);\n    } catch (error) {\n      console.error('Failed to initialize store:', error);\n    }\n  };\n\n  initializeStore();\n}, [connected]);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-handle-purchases",children:"3. Handle Purchases"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const handlePurchase = async (productId) => {\n  try {\n    // Platform-specific purchase requests\n    if (Platform.OS === 'ios') {\n      await requestPurchase({\n        request: {\n          sku: productId,\n          andDangerouslyFinishTransactionAutomatically: false,\n        },\n      });\n    } /* Platform.OS === \"android\" */ else {\n      await requestPurchase({\n        request: {skus: [productId]},\n      });\n    }\n  } catch (error) {\n    console.error('Purchase failed:', error);\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-complete-transactions",children:"4. Complete Transactions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  if (currentPurchase) {\n    const completePurchase = async () => {\n      try {\n        // Validate receipt (recommended)\n        const isValid = await validateReceipt(currentPurchase.id);\n\n        if (isValid) {\n          // Finish the transaction\n          await finishTransaction({\n            purchase: currentPurchase,\n            isConsumable: true, // Set true for consumable products\n          });\n\n          // Grant the purchase to user\n          console.log('Purchase completed successfully!');\n        }\n      } catch (error) {\n        console.error('Failed to complete purchase:', error);\n      }\n    };\n\n    completePurchase();\n  }\n}, [currentPurchase]);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This implementation includes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consumable Products"}),": Bulb packs that can be purchased multiple times"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Subscriptions"}),": Premium subscription with recurring billing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Receipt Validation"}),": Server-side validation for both platforms"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error Handling"}),": Comprehensive error handling and user feedback"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Loading States"}),": UI feedback during purchase flow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Premium Status"}),": Subscription status management"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// iOS vs Android purchase requests\nif (Platform.OS === 'ios') {\n  await requestPurchase({\n    request: {\n      sku: productId,\n      andDangerouslyFinishTransactionAutomatically: false, // Important!\n    },\n  });\n} /* Platform.OS === \"android\" */ else {\n  await requestPurchase({\n    request: {skus: [productId]}, // Android uses array\n  });\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"consumable-vs-non-consumable",children:"Consumable vs Non-Consumable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Mark products as consumable to allow repurchasing\nawait finishTransaction({\n  purchase: currentPurchase,\n  isConsumable: bulbsToAdd > 0, // Consumable products can be bought again\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"receipt-validation",children:"Receipt Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Always validate receipts before granting purchases\nconst isValidReceipt = await validatePurchaseReceipt(\n  productId,\n  currentPurchase,\n  handleValidateReceipt,\n);\n\nif (isValidReceipt) {\n  // Grant the purchase\n  await finishTransaction({...});\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Handle different error types appropriately\nif (currentPurchaseError.code === ErrorCode.E_USER_CANCELLED) {\n  return; // Don't show error for user cancellation\n}\n\n// Show error for other cases\nAlert.alert('Purchase Error', 'Please try again.');\n"})}),"\n",(0,s.jsx)(n.h2,{id:"complete-implementation-1",children:"Complete Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import React, {useEffect, useState} from 'react';\nimport {\n  View,\n  Text,\n  FlatList,\n  TouchableOpacity,\n  Alert,\n  StyleSheet,\n  ActivityIndicator,\n  Platform,\n} from 'react-native';\nimport {useIAP, ProductPurchaseAndroid} from 'expo-iap';\n\n// Define your product IDs\nconst PRODUCT_IDS = [\n  'com.yourapp.premium',\n  'com.yourapp.remove_ads',\n  'com.yourapp.extra_features',\n];\n\nconst SUBSCRIPTION_IDS = [\n  'com.yourapp.premium_monthly',\n  'com.yourapp.premium_yearly',\n];\n\nexport default function Store() {\n  const {\n    connected,\n    products,\n    subscriptions,\n    currentPurchase,\n    currentPurchaseError,\n    getProducts,\n    getSubscriptions,\n    requestPurchase,\n    finishTransaction,\n  } = useIAP();\n\n  const [loading, setLoading] = useState(false);\n  const [purchasedItems, setPurchasedItems] = useState(new Set());\n\n  // Initialize store\n  useEffect(() => {\n    if (connected) {\n      loadProducts();\n    }\n  }, [connected]);\n\n  // Handle purchase updates\n  useEffect(() => {\n    if (currentPurchase) {\n      handlePurchaseUpdate(currentPurchase);\n    }\n  }, [currentPurchase]);\n\n  // Handle purchase errors\n  useEffect(() => {\n    if (currentPurchaseError) {\n      handlePurchaseError(currentPurchaseError);\n    }\n  }, [currentPurchaseError]);\n\n  const loadProducts = async () => {\n    try {\n      setLoading(true);\n\n      // Load both products and subscriptions\n      await Promise.all([\n        getProducts({skus: PRODUCT_IDS}),\n        getSubscriptions({skus: SUBSCRIPTION_IDS}),\n      ]);\n\n      console.log('Products loaded successfully');\n    } catch (error) {\n      console.error('Failed to load products:', error);\n      Alert.alert('Error', 'Failed to load store products');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePurchaseUpdate = async (purchase) => {\n    try {\n      console.log('Processing purchase:', purchase.productId);\n\n      // Here you would typically validate the receipt on your server\n      const isValid = await validatePurchase(purchase);\n\n      if (isValid) {\n        // Grant the purchase to the user\n        await grantPurchase(purchase);\n\n        // Update local state\n        setPurchasedItems((prev) => new Set([...prev, purchase.productId]));\n\n        // Finish the transaction\n        await finishTransaction({purchase});\n\n        Alert.alert(\n          'Purchase Successful',\n          `Thank you for purchasing ${purchase.productId}!`,\n        );\n      } else {\n        Alert.alert('Error', 'Purchase validation failed');\n      }\n    } catch (error) {\n      console.error('Error processing purchase:', error);\n      Alert.alert('Error', 'Failed to process purchase');\n    }\n  };\n\n  const handlePurchaseError = (error) => {\n    console.error('Purchase error:', error);\n\n    switch (error.code) {\n      case 'E_USER_CANCELLED':\n        // User cancelled - no need to show error\n        break;\n      case 'E_NETWORK_ERROR':\n        Alert.alert(\n          'Network Error',\n          'Please check your internet connection and try again.',\n        );\n        break;\n      case 'E_ITEM_UNAVAILABLE':\n        Alert.alert(\n          'Product Unavailable',\n          'This product is currently unavailable.',\n        );\n        break;\n      default:\n        Alert.alert(\n          'Purchase Failed',\n          error.message || 'Unknown error occurred',\n        );\n        break;\n    }\n  };\n\n  const buyProduct = async (productId) => {\n    if (!connected) {\n      Alert.alert('Error', 'Store is not connected');\n      return;\n    }\n\n    try {\n      console.log('Requesting purchase for:', productId);\n\n      // Platform-specific purchase requests\n      // iOS and Android have different parameter requirements\n      if (Platform.OS === 'ios') {\n        await requestPurchase({\n          request: {\n            sku: productId,\n            // Important: Set to false to manually handle transaction finishing\n            // This allows proper receipt validation before finishing the transaction\n            andDangerouslyFinishTransactionAutomatically: false,\n          },\n        });\n      } /* Platform.OS === \"android\" */ else {\n        await requestPurchase({\n          request: {skus: [productId]},\n        });\n      }\n    } catch (error) {\n      console.error('Purchase request failed:', error);\n      Alert.alert('Error', 'Failed to initiate purchase');\n    }\n  };\n\n  const validatePurchase = async (purchase) => {\n    // IMPORTANT: Platform-specific validation requirements:\n    // - iOS: Only needs receiptData and productId\n    // - Android: Requires packageName, purchaseToken, and optionally accessToken\n    // Always check required parameters BEFORE attempting validation!\n\n    try {\n      // Handle both iOS and Android validation\n      if (Platform.OS === 'ios') {\n        // iOS: Simple validation with receipt data\n        const response = await fetch(\n          'https://your-server.com/validate-receipt-ios',\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              receiptData: purchase.transactionReceipt,\n              productId: purchase.productId,\n            }),\n          },\n        );\n\n        const result = await response.json();\n        return result.isValid;\n      } else if (Platform.OS === 'android') {\n        // Android: Extract required validation parameters\n        // Note: Type casting is required due to platform-specific purchase properties\n        const purchaseToken = (purchase as ProductPurchaseAndroid)\n          .purchaseTokenAndroid;\n        const packageName =\n          (purchase as ProductPurchaseAndroid).packageNameAndroid ||\n          'com.yourapp.package';\n\n        // Determine if it's a subscription\n        const isSub = SUBSCRIPTION_IDS.includes(purchase.productId);\n\n        // CRITICAL: Check required Android parameters before validation\n        if (!purchaseToken || !packageName) {\n          throw new Error(\n            'Android validation requires packageName and purchaseToken',\n          );\n        }\n\n        // Note: For server-side validation with Google Play API, you may also need:\n        // - accessToken: OAuth2 token for accessing Google Play Developer API\n        // This is typically handled server-side, not in the client app\n\n        const response = await fetch(\n          'https://your-server.com/validate-receipt-android',\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              packageName,\n              productToken: purchaseToken,\n              productId: purchase.productId,\n              isSub,\n              // accessToken is typically managed server-side\n            }),\n          },\n        );\n\n        const result = await response.json();\n        console.log('Receipt validation result:', result);\n        return result.isValid;\n      }\n\n      return true; // Default to true for unsupported platforms in dev\n    } catch (validationError) {\n      console.error('Error during receipt validation:', validationError);\n      // Continue despite validation errors in production to not block purchases\n      // In a production app, you might want to handle this differently\n      return true;\n    }\n  };\n\n  const grantPurchase = async (purchase) => {\n    // Grant the purchase to the user\n    // This could involve:\n    // - Updating user preferences\n    // - Unlocking features\n    // - Adding credits/coins\n    // - Updating subscription status\n\n    console.log('Granting purchase:', purchase.productId);\n\n    // Example: Update local storage or send to your backend\n    try {\n      await fetch('https://your-server.com/grant-purchase', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: 'current-user-id',\n          productId: purchase.productId,\n          transactionId: purchase.transactionId,\n        }),\n      });\n    } catch (error) {\n      console.error('Failed to grant purchase:', error);\n      throw error;\n    }\n  };\n\n  const renderProduct = ({item}) => {\n    const isPurchased = purchasedItems.has(item.productId);\n\n    return (\n      <View style={styles.productCard}>\n        <View style={styles.productInfo}>\n          <Text style={styles.productTitle}>{item.title}</Text>\n          <Text style={styles.productDescription}>{item.description}</Text>\n          <Text style={styles.productPrice}>{item.localizedPrice}</Text>\n        </View>\n\n        <TouchableOpacity\n          style={[styles.buyButton, isPurchased && styles.purchasedButton]}\n          onPress={() => buyProduct(item.productId)}\n          disabled={isPurchased || loading}\n        >\n          <Text\n            style={[\n              styles.buyButtonText,\n              isPurchased && styles.purchasedButtonText,\n            ]}\n          >\n            {isPurchased ? 'Purchased' : 'Buy'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  const renderSubscription = ({item}) => {\n    return (\n      <View style={styles.subscriptionCard}>\n        <View style={styles.productInfo}>\n          <Text style={styles.productTitle}>{item.title}</Text>\n          <Text style={styles.productDescription}>{item.description}</Text>\n          <Text style={styles.productPrice}>{item.localizedPrice}</Text>\n          {item.subscriptionPeriod && (\n            <Text style={styles.subscriptionPeriod}>\n              per {item.subscriptionPeriod}\n            </Text>\n          )}\n        </View>\n\n        <TouchableOpacity\n          style={styles.subscribeButton}\n          onPress={() => buyProduct(item.productId)}\n          disabled={loading}\n        >\n          <Text style={styles.subscribeButtonText}>Subscribe</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  if (!connected) {\n    return (\n      <View style={styles.centerContainer}>\n        <ActivityIndicator size=\"large\" />\n        <Text style={styles.loadingText}>Connecting to store...</Text>\n      </View>\n    );\n  }\n\n  if (loading) {\n    return (\n      <View style={styles.centerContainer}>\n        <ActivityIndicator size=\"large\" />\n        <Text style={styles.loadingText}>Loading products...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.sectionTitle}>Products</Text>\n      <FlatList\n        data={products}\n        renderItem={renderProduct}\n        keyExtractor={(item) => item.productId}\n        style={styles.productList}\n      />\n\n      <Text style={styles.sectionTitle}>Subscriptions</Text>\n      <FlatList\n        data={subscriptions}\n        renderItem={renderSubscription}\n        keyExtractor={(item) => item.productId}\n        style={styles.productList}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#f5f5f5',\n  },\n  centerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: '#666',\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginVertical: 16,\n    color: '#333',\n  },\n  productList: {\n    marginBottom: 24,\n  },\n  productCard: {\n    backgroundColor: 'white',\n    padding: 16,\n    marginBottom: 12,\n    borderRadius: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  subscriptionCard: {\n    backgroundColor: '#e3f2fd',\n    padding: 16,\n    marginBottom: 12,\n    borderRadius: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#2196f3',\n  },\n  productInfo: {\n    flex: 1,\n  },\n  productTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 4,\n    color: '#333',\n  },\n  productDescription: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 8,\n  },\n  productPrice: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#2196f3',\n  },\n  subscriptionPeriod: {\n    fontSize: 12,\n    color: '#666',\n    fontStyle: 'italic',\n  },\n  buyButton: {\n    backgroundColor: '#2196f3',\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 6,\n    minWidth: 80,\n  },\n  purchasedButton: {\n    backgroundColor: '#4caf50',\n  },\n  buyButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  purchasedButtonText: {\n    color: 'white',\n  },\n  subscribeButton: {\n    backgroundColor: '#ff9800',\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 6,\n  },\n  subscribeButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"key-features-explained",children:"Key Features Explained"}),"\n",(0,s.jsx)(n.h3,{id:"1-product-configuration",children:"1. Product Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Define your product IDs\nconst PRODUCT_IDS = [\n  'com.yourapp.premium',\n  'com.yourapp.remove_ads',\n  'com.yourapp.extra_features',\n];\n\nconst SUBSCRIPTION_IDS = [\n  'com.yourapp.premium_monthly',\n  'com.yourapp.premium_yearly',\n];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-platform-specific-purchase-handling",children:"2. Platform-Specific Purchase Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Platform-specific purchase requests\nif (Platform.OS === 'ios') {\n  await requestPurchase({\n    request: {\n      sku: productId,\n      andDangerouslyFinishTransactionAutomatically: false,\n    },\n  });\n} else {\n  await requestPurchase({\n    request: {skus: [productId]},\n  });\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-receipt-validation",children:"3. Receipt Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Cross-platform receipt validation\nconst isValid = await validatePurchase(purchase);\nif (isValid) {\n  await grantPurchase(purchase);\n  await finishTransaction({purchase});\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-error-handling",children:"4. Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Handle different error types\nswitch (error.code) {\n  case 'E_USER_CANCELLED':\n    // User cancelled - no error needed\n    break;\n  case 'E_NETWORK_ERROR':\n    Alert.alert('Network Error', 'Check your connection');\n    break;\n  default:\n    Alert.alert('Purchase Failed', error.message);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-ui-components",children:"5. UI Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// FlatList for products and subscriptions\n<FlatList\n  data={products}\n  renderItem={renderProduct}\n  keyExtractor={(item) => item.productId}\n/>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Always validate receipts"})," before granting purchases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mark consumables correctly"})," to allow repurchasing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle platform differences"})," in price formatting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provide loading states"})," during purchase flow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement proper error handling"})," for better UX"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Store purchase records"})," in your backend"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check subscription status"})," on app launch"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-1",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Always validate receipts"})," before granting purchases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle platform differences"})," in purchase request parameters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provide loading states"})," during purchase flow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement proper error handling"})," for better UX"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Store purchase records"})," in your backend"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use FlatList"})," for better performance with large product lists"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check connection status"})," before initiating purchases"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Test on both iOS and Android devices"}),"\n",(0,s.jsx)(n.li,{children:"Test with sandbox/test accounts"}),"\n",(0,s.jsx)(n.li,{children:"Verify receipt validation works correctly"}),"\n",(0,s.jsx)(n.li,{children:"Test error scenarios (network issues, invalid products)"}),"\n",(0,s.jsx)(n.li,{children:"Test subscription renewal and cancellation"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you've seen a complete store implementation, here are recommended next steps:"}),"\n",(0,s.jsx)(n.h3,{id:"-setup--configuration",children:"\ud83d\ude80 Setup & Configuration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../getting-started/setup-android",children:(0,s.jsx)(n.strong,{children:"Android Setup"})}),": Configure Google Play Console and Android-specific settings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../getting-started/setup-ios",children:(0,s.jsx)(n.strong,{children:"iOS Setup"})}),": Set up App Store Connect and iOS configuration"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-learn-more",children:"\ud83d\udcd6 Learn More"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./basic-store",children:(0,s.jsx)(n.strong,{children:"Basic Usage Patterns"})}),": Start with simpler examples before implementing a complete store"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../guides/getting-started",children:(0,s.jsx)(n.strong,{children:"Getting Started Guide"})}),": Learn the fundamentals of Expo IAP"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../api/use-iap",children:(0,s.jsx)(n.strong,{children:"API Reference"})}),": Detailed documentation for all useIAP methods and options"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../api/error-codes",children:(0,s.jsx)(n.strong,{children:"Error Handling"})}),": Comprehensive guide to error management and recovery"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-advanced-topics",children:"\ud83d\udd27 Advanced Topics"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../guides/purchases",children:(0,s.jsx)(n.strong,{children:"Receipt Validation"})}),": Implement secure server-side validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"./subscription-manager",children:(0,s.jsx)(n.strong,{children:"Subscription Management"})}),": Handle recurring subscriptions and renewals"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../guides/troubleshooting",children:(0,s.jsx)(n.strong,{children:"Troubleshooting"})}),": Solutions to common issues and debugging tips"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-testing",children:"\ud83e\uddea Testing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Test your implementation with sandbox accounts on both platforms"}),"\n",(0,s.jsx)(n.li,{children:"Verify receipt validation works correctly"}),"\n",(0,s.jsx)(n.li,{children:"Test error scenarios (network issues, invalid products)"}),"\n",(0,s.jsx)(n.li,{children:"Test subscription renewal and cancellation flows"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This implementation provides a complete, production-ready in-app purchase system that handles both consumable products and subscriptions with proper error handling and receipt validation."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);