"use strict";(self.webpackChunkexpo_iap_docs=self.webpackChunkexpo_iap_docs||[]).push([[6700],{571:(e,n,i)=>{i.d(n,{A:()=>a});var r=i(6540),t=i(4848);function s({className:e="adfit",style:n,unit:i,height:s,width:a}){return(0,r.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const r=n.querySelectorAll(".kakao_ad_area"),t=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');r.forEach(e=>e.remove()),t.forEach(e=>e.remove());const o=document.createElement("ins"),c=document.createElement("script");o.className="kakao_ad_area",o.style.cssText="display:none; width:100%;",c.async=!0,c.type="text/javascript",c.src="//t1.daumcdn.net/kas/static/ba.min.js",o.setAttribute("data-ad-width",a.toString()),o.setAttribute("data-ad-height",s.toString()),o.setAttribute("data-ad-unit",i),n.appendChild(o),n.appendChild(c)},100);return()=>clearTimeout(n)},[e,i,s,a]),(0,t.jsx)("div",{style:n,children:(0,t.jsx)("div",{className:e})})}function a(){return(0,t.jsx)(s,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},6096:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"guides/getting-started","title":"Getting Started","description":"expo-iap is a powerful in-app purchase solution specifically designed for Expo and React Native applications. It provides a unified API for handling in-app purchases across iOS and Android platforms with comprehensive error handling and modern TypeScript support.","source":"@site/versioned_docs/version-2.6/guides/getting-started.md","sourceDirName":"guides","slug":"/guides/getting-started","permalink":"/docs/2.6/guides/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/versioned_docs/version-2.6/guides/getting-started.md","tags":[],"version":"2.6","sidebarPosition":1,"frontMatter":{"title":"Getting Started","sidebar_label":"Getting Started","sidebar_position":1}}');var t=i(4848),s=i(8453),a=i(571);const o={title:"Getting Started",sidebar_label:"Getting Started",sidebar_position:1},c="Getting Started",l={},d=[{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Expo Managed Workflow",id:"expo-managed-workflow",level:3},{value:"React Native CLI Projects",id:"react-native-cli-projects",level:3},{value:"iOS Configuration",id:"ios-configuration",level:3},{value:"Android Configuration",id:"android-configuration",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Initialize the connection",id:"1-initialize-the-connection",level:3},{value:"2. Fetch available products",id:"2-fetch-available-products",level:3},{value:"3. Request a purchase",id:"3-request-a-purchase",level:3},{value:"4. Handle purchase updates",id:"4-handle-purchase-updates",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,t.jsx)(a.A,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"expo-iap"})," is a powerful in-app purchase solution specifically designed for Expo and React Native applications. It provides a unified API for handling in-app purchases across iOS and Android platforms with comprehensive error handling and modern TypeScript support."]}),"\n",(0,t.jsxs)(n.admonition,{title:"This library provides the basic features to consume In-App purchases on the client-side, however you'll have to implement the server-side to validate your receipts (which is probably the most time consuming part to do it correctly). :::",type:"note",children:[(0,t.jsx)(n.h2,{id:"requirements",children:"Requirements"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"React Native 0.64 or later, or Expo SDK 45 or later"}),"\n",(0,t.jsx)(n.li,{children:"Node.js 16 or later"}),"\n",(0,t.jsx)(n.li,{children:"iOS 12+ for iOS apps"}),"\n",(0,t.jsx)(n.li,{children:"Android API level 21+ for Android apps"}),"\n"]}),(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),(0,t.jsx)(n.p,{children:"Install the package using your favorite package manager:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install expo-iap\n"})}),(0,t.jsx)(n.h3,{id:"expo-managed-workflow",children:"Expo Managed Workflow"}),(0,t.jsxs)(n.p,{children:["Since in-app purchases require native modules that aren't available in Expo Go, you'll need to use ",(0,t.jsx)(n.code,{children:"expo-dev-client"})," for development builds."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx expo install expo-dev-client\nnpx expo run:ios # or npx expo run:android\n"})}),(0,t.jsxs)(n.p,{children:["Learn more about ",(0,t.jsx)(n.a,{href:"https://docs.expo.dev/guides/adopting-prebuild/",children:"converting from Expo Go to development builds"}),"."]}),(0,t.jsx)(n.h3,{id:"react-native-cli-projects",children:"React Native CLI Projects"}),(0,t.jsxs)(n.p,{children:["For React Native CLI projects, install ",(0,t.jsx)(n.code,{children:"expo-modules-core"})," first:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx install-expo-modules@latest\n"})}),(0,t.jsxs)(n.p,{children:["Learn more about ",(0,t.jsx)(n.a,{href:"https://docs.expo.dev/bare/installing-expo-modules/",children:"installing Expo modules in existing React Native projects"}),"."]}),(0,t.jsx)(n.h3,{id:"ios-configuration",children:"iOS Configuration"}),(0,t.jsx)(n.p,{children:"For iOS projects, you need to configure StoreKit capabilities:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Open your iOS project in Xcode"}),"\n",(0,t.jsx)(n.li,{children:"Select your target in the project navigator"}),"\n",(0,t.jsx)(n.li,{children:'Go to "Signing & Capabilities" tab'}),"\n",(0,t.jsx)(n.li,{children:'Click "+" and add "In-App Purchase" capability'}),"\n"]}),(0,t.jsx)(n.h3,{id:"android-configuration",children:"Android Configuration"}),(0,t.jsx)(n.p,{children:"For Android, ensure your app is configured for Google Play Billing:"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Open ",(0,t.jsx)(n.code,{children:"android/app/build.gradle"})]}),"\n",(0,t.jsx)(n.li,{children:"Add the billing permission:"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gradle",children:"android {\n    defaultConfig {\n        // ... other configurations\n    }\n}\n\ndependencies {\n    // ... other dependencies\n    implementation 'com.android.billingclient:billing:5.0.0'\n}\n"})}),(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),(0,t.jsx)(n.h3,{id:"1-initialize-the-connection",children:"1. Initialize the connection"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import {useIAP} from 'expo-iap';\n\nexport default function App() {\n  const {\n    connected,\n    products,\n    purchaseHistory,\n    getProducts,\n    requestPurchase,\n    finishTransaction,\n  } = useIAP();\n\n  // Initialize connection when component mounts\n  useEffect(() => {\n    // Connection is automatically handled by useIAP\n  }, []);\n\n  return (\n    <View>\n      <Text>Connection Status: {connected ? 'Connected' : 'Disconnected'}</Text>\n      {/* Your app content */}\n    </View>\n  );\n}\n"})}),(0,t.jsx)(n.h3,{id:"2-fetch-available-products",children:"2. Fetch available products"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const productIds = [\n  'com.example.product1',\n  'com.example.product2',\n  'com.example.subscription1',\n];\n\nuseEffect(() => {\n  if (connected) {\n    getProducts({skus: productIds});\n  }\n}, [connected, getProducts]);\n"})}),(0,t.jsx)(n.h3,{id:"3-request-a-purchase",children:"3. Request a purchase"}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important"}),": iOS and Android have different parameter requirements:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import {Platform} from 'react-native';\n\nconst handlePurchase = async (productId: string) => {\n  try {\n    if (Platform.OS === 'ios') {\n      // iOS: single product purchase\n      await requestPurchase({\n        request: {sku: productId}\n      });\n    } else if (Platform.OS === 'android') {\n      // Android: array of products (even for single purchase)\n      await requestPurchase({\n        request: {skus: [productId]}\n      });\n    }\n  } catch (error) {\n    console.error('Purchase failed:', error);\n  }\n};\n"})}),(0,t.jsx)(n.p,{children:"This platform difference exists because iOS can only purchase one product at a time, while Android supports purchasing multiple products in a single transaction."}),(0,t.jsx)(n.h3,{id:"4-handle-purchase-updates",children:"4. Handle purchase updates"}),(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"useIAP"})," hook automatically handles purchase updates. When a purchase is successful, you should validate the receipt on your server and then finish the transaction."]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important"}),": Receipt validation also has platform-specific requirements:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"iOS"}),": Only needs the receipt data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Android"}),": Requires ",(0,t.jsx)(n.code,{children:"packageName"}),", ",(0,t.jsx)(n.code,{children:"purchaseToken"}),", and optionally ",(0,t.jsx)(n.code,{children:"accessToken"})]}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  if (currentPurchase) {\n    // Platform-specific validation\n    const validateAndFinish = async () => {\n      try {\n        if (Platform.OS === 'ios') {\n          // iOS: Simple validation\n          await validateReceiptOnServer({\n            receiptData: currentPurchase.transactionReceipt,\n            productId: currentPurchase.productId,\n          });\n        } else if (Platform.OS === 'android') {\n          // Android: Check required parameters first\n          const purchaseToken = currentPurchase.purchaseTokenAndroid;\n          const packageName = currentPurchase.packageNameAndroid;\n          \n          if (!purchaseToken || !packageName) {\n            throw new Error('Android validation requires packageName and purchaseToken');\n          }\n          \n          await validateReceiptOnServer({\n            packageName,\n            purchaseToken,\n            productId: currentPurchase.productId,\n          });\n        }\n        \n        // If validation successful, finish the transaction\n        await finishTransaction({purchase: currentPurchase});\n      } catch (error) {\n        console.error('Receipt validation failed:', error);\n      }\n    };\n    \n    validateAndFinish();\n  }\n}, [currentPurchase, finishTransaction]);\n"})}),(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Handle connection lifecycle"}),": The ",(0,t.jsx)(n.code,{children:"useIAP"})," hook automatically manages the connection lifecycle, but be aware of when your app is connected before making purchase requests."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Test thoroughly"}),": Test with sandbox accounts and real devices. In-app purchases don't work in simulators/emulators. Use Apple's Sandbox environment and Google Play Console's testing features."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Implement comprehensive error handling"}),": Handle various purchase scenarios including user cancellation, network errors, and invalid products. See our ",(0,t.jsx)(n.a,{href:"./troubleshooting",children:"error handling guide"})," for common issues and solutions."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Restore purchases properly"}),": Implement purchase restoration for non-consumable products and subscriptions. This is required by app store guidelines and essential for users who reinstall your app."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Server-side receipt validation is recommended"}),": For production apps, it's highly recommended to validate receipts on your secure server before granting access to content or features. See ",(0,t.jsx)(n.a,{href:"https://developer.apple.com/documentation/storekit/in-app_purchase/validating_receipts_with_the_app_store",children:"Apple's receipt validation guide"})," and ",(0,t.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/security#verify",children:"Google Play's verification guide"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Finish transactions after validation"}),": Always call ",(0,t.jsx)(n.code,{children:"finishTransaction"})," after successfully validating a purchase on your server. Failing to do so will cause the purchase to remain in a pending state and may trigger repeated purchase prompts."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Check server-side validation libraries"}),": Consider using open-source libraries like ",(0,t.jsx)(n.a,{href:"https://github.com/ladeiko/node-app-store-receipt-verify",children:"node-app-store-receipt-verify"})," for iOS or ",(0,t.jsx)(n.a,{href:"https://github.com/macklinu/google-play-billing-validator",children:"google-play-billing-validator"})," for Android to simplify server-side validation."]}),"\n"]}),"\n"]}),(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Review our ",(0,t.jsx)(n.a,{href:"../examples/complete-impl",children:"Complete Store Implementation"})," for a full, production-ready example"]}),"\n",(0,t.jsxs)(n.li,{children:["Learn about the ",(0,t.jsx)(n.a,{href:"./lifecycle",children:"purchase lifecycle"})," and proper state management"]}),"\n",(0,t.jsxs)(n.li,{children:["Check out ",(0,t.jsx)(n.a,{href:"./troubleshooting",children:"common troubleshooting tips"})," and solutions"]}),"\n",(0,t.jsxs)(n.li,{children:["Explore the ",(0,t.jsx)(n.a,{href:"../api/",children:"API reference"})," for detailed method documentation"]}),"\n"]})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);