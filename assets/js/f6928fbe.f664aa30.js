"use strict";(self.webpackChunkexpo_iap_docs=self.webpackChunkexpo_iap_docs||[]).push([[6139],{571:(e,n,r)=>{r.d(n,{A:()=>t});var s=r(6540),i=r(4848);function o({className:e="adfit",style:n,unit:r,height:o,width:t}){return(0,s.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const s=n.querySelectorAll(".kakao_ad_area"),i=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');s.forEach(e=>e.remove()),i.forEach(e=>e.remove());const c=document.createElement("ins"),a=document.createElement("script");c.className="kakao_ad_area",c.style.cssText="display:none; width:100%;",a.async=!0,a.type="text/javascript",a.src="//t1.daumcdn.net/kas/static/ba.min.js",c.setAttribute("data-ad-width",t.toString()),c.setAttribute("data-ad-height",o.toString()),c.setAttribute("data-ad-unit",r),n.appendChild(c),n.appendChild(a)},100);return()=>clearTimeout(n)},[e,r,o,t]),(0,i.jsx)("div",{style:n,children:(0,i.jsx)("div",{className:e})})}function t(){return(0,i.jsx)(o,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}},9230:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api/methods/core-methods","title":"Core Methods","description":"This section covers the core methods available in expo-iap for managing in-app purchases.","source":"@site/versioned_docs/version-2.6/api/methods/core-methods.md","sourceDirName":"api/methods","slug":"/api/methods/core-methods","permalink":"/docs/2.6/api/methods/core-methods","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/versioned_docs/version-2.6/api/methods/core-methods.md","tags":[],"version":"2.6","sidebarPosition":1,"frontMatter":{"title":"Core Methods","sidebar_label":"Core Methods","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Types","permalink":"/docs/2.6/api/types"},"next":{"title":"Listeners","permalink":"/docs/2.6/api/methods/listeners"}}');var i=r(4848),o=r(8453),t=r(571);const c={title:"Core Methods",sidebar_label:"Core Methods",sidebar_position:1},a="Core Methods",d={},l=[{value:"\ud83d\udea8 Important Platform Differences",id:"-important-platform-differences",level:2},{value:"Key Differences:",id:"key-differences",level:3},{value:"initConnection()",id:"initconnection",level:2},{value:"endConnection()",id:"endconnection",level:2},{value:"getStorefront()",id:"getstorefront",level:2},{value:"getAppTransaction()",id:"getapptransaction",level:2},{value:"getProducts()",id:"getproducts",level:2},{value:"getSubscriptions()",id:"getsubscriptions",level:2},{value:"requestPurchase()",id:"requestpurchase",level:2},{value:"New Platform-Specific API (v2.7.0+) - Recommended",id:"new-platform-specific-api-v270---recommended",level:3},{value:"Legacy Platform-Specific Usage",id:"legacy-platform-specific-usage",level:3},{value:"Detailed Platform Examples",id:"detailed-platform-examples",level:3},{value:"iOS Only",id:"ios-only",level:4},{value:"Android Only",id:"android-only",level:4},{value:"requestSubscription() - Deprecated",id:"requestsubscription---deprecated",level:2},{value:"Migration Guide",id:"migration-guide",level:3},{value:"Legacy Usage (Not Recommended)",id:"legacy-usage-not-recommended",level:3},{value:"Legacy API (Deprecated)",id:"legacy-api-deprecated",level:3},{value:"finishTransaction()",id:"finishtransaction",level:2},{value:"getAvailablePurchases()",id:"getavailablepurchases",level:2},{value:"getPurchaseHistories()",id:"getpurchasehistories",level:2},{value:"deepLinkToSubscriptions()",id:"deeplinktosubscriptions",level:2},{value:"getStorefront()",id:"getstorefront-1",level:2},{value:"Purchase Interface",id:"purchase-interface",level:2},{value:"Important Subscription Properties",id:"important-subscription-properties",level:3},{value:"Error Handling",id:"error-handling",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",del:"del",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"core-methods",children:"Core Methods"})}),"\n",(0,i.jsx)(t.A,{}),"\n",(0,i.jsx)(n.p,{children:"This section covers the core methods available in expo-iap for managing in-app purchases."}),"\n",(0,i.jsx)(n.h2,{id:"-important-platform-differences",children:"\ud83d\udea8 Important Platform Differences"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Critical for Cross-Platform Development:"})," iOS and Android have fundamental differences in their purchase APIs."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-differences",children:"Key Differences:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Can only purchase ",(0,i.jsx)(n.strong,{children:"one product at a time"})," (single SKU)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Can purchase ",(0,i.jsx)(n.strong,{children:"multiple products at once"})," (array of SKUs)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This difference exists because:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"iOS App Store processes purchases individually"}),"\n",(0,i.jsx)(n.li,{children:"Google Play Store supports batch purchases"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"iOS"}),(0,i.jsx)(n.th,{children:"Android"}),(0,i.jsx)(n.th,{children:"Cross-Platform Solution"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"requestPurchase()"})}),(0,i.jsxs)(n.td,{children:["Uses ",(0,i.jsx)(n.code,{children:"sku: string"})]}),(0,i.jsxs)(n.td,{children:["Uses ",(0,i.jsx)(n.code,{children:"skus: string[]"})]}),(0,i.jsx)(n.td,{children:"Platform-specific handling required"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.del,{children:(0,i.jsx)(n.code,{children:"requestSubscription()"})})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Deprecated"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Deprecated"})}),(0,i.jsxs)(n.td,{children:["Use ",(0,i.jsx)(n.code,{children:"requestPurchase()"})," with ",(0,i.jsx)(n.code,{children:"type: 'subs'"})]})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udca1 Best Practice:"})," Use the new platform-specific API (v2.7.0+) to avoid platform checks:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// New API - no Platform.OS checks needed!\nawait requestPurchase({\n  request: {\n    ios: { sku: productId },\n    android: { skus: [productId] }\n  },\n  type: 'inapp'\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or if you need to use the legacy API:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {Platform} from 'react-native';\n\nif (Platform.OS === 'ios') {\n  await requestPurchase({\n    request: {sku: productId}\n  });\n} else if (Platform.OS === 'android') {\n  await requestPurchase({\n    request: {skus: [productId]}\n  });\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83c\udfaf Recommended Approach:"})," For the best developer experience, use the ",(0,i.jsxs)(n.a,{href:"/docs/api/use-iap",children:[" ",(0,i.jsx)(n.code,{children:"useIAP"})," hook"]})," which handles platform differences automatically and provides a cleaner callback-based API."]}),"\n",(0,i.jsx)(n.h2,{id:"initconnection",children:"initConnection()"}),"\n",(0,i.jsx)(n.p,{children:"Initializes the connection to the store. This method must be called before any other store operations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {initConnection} from 'expo-iap';\n\nconst initialize = async () => {\n  try {\n    await initConnection();\n    console.log('Store connection initialized');\n  } catch (error) {\n    console.error('Failed to initialize connection:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<boolean>"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," When using the ",(0,i.jsx)(n.code,{children:"useIAP"})," hook, connection is automatically managed."]}),"\n",(0,i.jsx)(n.h2,{id:"endconnection",children:"endConnection()"}),"\n",(0,i.jsx)(n.p,{children:"Ends the connection to the store and cleans up resources."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {endConnection} from 'expo-iap';\n\nconst cleanup = async () => {\n  try {\n    await endConnection();\n    console.log('Store connection ended');\n  } catch (error) {\n    console.error('Failed to end connection:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," When using the ",(0,i.jsx)(n.code,{children:"useIAP"})," hook, connection cleanup is automatic."]}),"\n",(0,i.jsx)(n.h2,{id:"getstorefront",children:"getStorefront()"}),"\n",(0,i.jsx)(n.p,{children:"Gets the current storefront (country code) for the user's App Store account (iOS only)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getStorefront} from 'expo-iap';\n\nconst fetchStorefront = async () => {\n  try {\n    const countryCode = await getStorefront();\n    console.log('User storefront:', countryCode); // e.g., 'US', 'GB', 'JP'\n    return countryCode;\n  } catch (error) {\n    console.error('Failed to get storefront:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<string | null>"})," - Returns the ISO country code of the user's App Store account, or null if unavailable."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS only"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," This is useful for region-specific pricing, content, or features."]}),"\n",(0,i.jsx)(n.h2,{id:"getapptransaction",children:"getAppTransaction()"}),"\n",(0,i.jsx)(n.p,{children:"Gets app transaction information for iOS apps (iOS 16.0+). AppTransaction represents the initial purchase that unlocked the app, useful for premium apps or apps that were previously paid."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getAppTransaction} from 'expo-iap';\n\nconst fetchAppTransaction = async () => {\n  try {\n    const appTransaction = await getAppTransaction();\n    if (appTransaction) {\n      console.log('App Transaction ID:', appTransaction.appTransactionID);\n      console.log('Original Purchase Date:', new Date(appTransaction.originalPurchaseDate));\n      console.log('Device Verification:', appTransaction.deviceVerification);\n    } else {\n      console.log('No app transaction found (app may be free)');\n    }\n  } catch (error) {\n    console.error('Failed to get app transaction:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<AppTransactionIOS | null>"})," - Returns the app transaction information or null if not available."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Platform:"})," iOS 16.0+ only"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"AppTransactionIOS Interface:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface AppTransactionIOS {\n  appTransactionID: string;\n  originalAppAccountToken?: string;\n  originalPurchaseDate: number; // milliseconds since epoch\n  deviceVerification: string;\n  deviceVerificationNonce: string;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," This is useful for verifying that a user legitimately purchased your app. The device verification data can be sent to your server for validation."]}),"\n",(0,i.jsx)(n.h2,{id:"getproducts",children:"getProducts()"}),"\n",(0,i.jsx)(n.p,{children:"Fetches product information from the store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getProducts} from 'expo-iap';\n\nconst fetchProducts = async () => {\n  try {\n    const products = await getProducts([\n      'com.example.product1',\n      'com.example.product2',\n    ]);\n\n    console.log('Products:', products);\n    return products;\n  } catch (error) {\n    console.error('Failed to fetch products:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skus"})," (string[]): Array of product IDs to fetch"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Product[]>"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/docs/2.6/api/types#Product",children:(0,i.jsx)(n.strong,{children:"Product Interface"})})}),"\n",(0,i.jsx)(n.h2,{id:"getsubscriptions",children:"getSubscriptions()"}),"\n",(0,i.jsx)(n.p,{children:"Fetches subscription product information from the store."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getSubscriptions} from 'expo-iap';\n\nconst fetchSubscriptions = async () => {\n  try {\n    const subscriptions = await getSubscriptions([\n      'com.example.premium_monthly',\n      'com.example.premium_yearly',\n    ]);\n\n    console.log('Subscriptions:', subscriptions);\n    return subscriptions;\n  } catch (error) {\n    console.error('Failed to fetch subscriptions:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skus"})," (string[]): Array of subscription IDs to fetch"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<SubscriptionProduct[]>"})]}),"\n",(0,i.jsx)(n.h2,{id:"requestpurchase",children:"requestPurchase()"}),"\n",(0,i.jsx)(n.p,{children:"Initiates a purchase request for products or subscriptions."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u26a0\ufe0f Platform Differences:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Can only purchase one product at a time (uses ",(0,i.jsx)(n.code,{children:"sku: string"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Can purchase multiple products at once (uses ",(0,i.jsx)(n.code,{children:"skus: string[]"}),")"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"new-platform-specific-api-v270---recommended",children:"New Platform-Specific API (v2.7.0+) - Recommended"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {requestPurchase} from 'expo-iap';\n\n// Product purchase\nconst buyProduct = async (productId: string) => {\n  try {\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: productId,\n          quantity: 1,\n        },\n        android: {\n          skus: [productId],\n        }\n      },\n      type: 'inapp',\n    });\n  } catch (error) {\n    console.error('Purchase failed:', error);\n  }\n};\n\n// Subscription purchase\nconst buySubscription = async (subscriptionId: string, subscription?: any) => {\n  try {\n    await requestPurchase({\n      request: {\n        ios: {\n          sku: subscriptionId,\n          appAccountToken: 'user-123',\n        },\n        android: {\n          skus: [subscriptionId],\n          subscriptionOffers: subscription?.subscriptionOfferDetails?.map(offer => ({\n            sku: subscriptionId,\n            offerToken: offer.offerToken,\n          })) || [],\n        }\n      },\n      type: 'subs',\n    });\n  } catch (error) {\n    console.error('Subscription failed:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"legacy-platform-specific-usage",children:"Legacy Platform-Specific Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {requestPurchase, Platform} from 'expo-iap';\n\nconst buyProduct = async (productId: string) => {\n  try {\n    if (Platform.OS === 'ios') {\n      // iOS: single product purchase\n      await requestPurchase({\n        request: {\n          sku: productId,\n        },\n        type: 'inapp',\n      });\n    } else if (Platform.OS === 'android') {\n      // Android: array of products (even for single purchase)\n      await requestPurchase({\n        request: {\n          skus: [productId],\n        },\n        type: 'inapp',\n      });\n    }\n    // Purchase result will be delivered via purchase listeners\n  } catch (error) {\n    console.error('Purchase request failed:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"detailed-platform-examples",children:"Detailed Platform Examples"}),"\n",(0,i.jsx)(n.h4,{id:"ios-only",children:"iOS Only"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    sku: productId,\n    quantity: 1,\n    appAccountToken: 'user-account-token',\n  },\n  type: 'inapp',\n});\n"})}),"\n",(0,i.jsx)(n.h4,{id:"android-only",children:"Android Only"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    skus: [productId],\n    obfuscatedAccountIdAndroid: 'user-account-id',\n    obfuscatedProfileIdAndroid: 'user-profile-id',\n  },\n  type: 'inapp',\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"params"})," (object):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"request"})," (object): Purchase request configuration","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": ",(0,i.jsx)(n.code,{children:"sku"})," (string) - Product ID to purchase"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": ",(0,i.jsx)(n.code,{children:"skus"})," (string[]) - Array of product IDs to purchase"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-platform"}),": Include both ",(0,i.jsx)(n.code,{children:"sku"})," and ",(0,i.jsx)(n.code,{children:"skus"})," for compatibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"quantity?"})," (number, iOS only): Purchase quantity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"appAccountToken?"})," (string, iOS only): User identifier for receipt validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"obfuscatedAccountIdAndroid?"})," (string, Android only): Obfuscated account ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"obfuscatedProfileIdAndroid?"})," (string, Android only): Obfuscated profile ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isOfferPersonalized?"})," (boolean, Android only): Whether offer is personalized"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"type?"})," ('inapp' | 'subs'): Purchase type, defaults to 'inapp'"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<ProductPurchase | ProductPurchase[] | SubscriptionPurchase | SubscriptionPurchase[] | void>"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," The actual purchase result is delivered through purchase listeners or the ",(0,i.jsx)(n.code,{children:"useIAP"})," hook callbacks, not as a return value."]}),"\n",(0,i.jsx)(n.h2,{id:"requestsubscription---deprecated",children:"requestSubscription() - Deprecated"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\u26a0\ufe0f DEPRECATED:"})," This method is deprecated and will be removed in version 3.0.0. Use ",(0,i.jsx)(n.code,{children:"requestPurchase()"})," with ",(0,i.jsx)(n.code,{children:"type: 'subs'"})," instead."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Old way (deprecated):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"await requestSubscription({\n  sku: subscriptionId,\n  skus: [subscriptionId],\n  subscriptionOffers: [{sku: subscriptionId, offerToken: 'token'}],\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"New way (recommended):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    ios: { sku: subscriptionId },\n    android: { \n      skus: [subscriptionId],\n      subscriptionOffers: [{sku: subscriptionId, offerToken: 'token'}]\n    }\n  },\n  type: 'subs'\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"legacy-usage-not-recommended",children:"Legacy Usage (Not Recommended)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {requestPurchase, Platform} from 'expo-iap';\n\nconst buySubscription = async (subscriptionId: string, subscription?: any) => {\n  try {\n    if (Platform.OS === 'ios') {\n      // iOS: single subscription purchase\n      await requestPurchase({\n        request: {\n          sku: subscriptionId,\n        },\n        type: 'subs',\n      });\n    } else if (Platform.OS === 'android') {\n      // Android: handle subscription offers\n      const subscriptionOffers = subscription?.subscriptionOfferDetails?.map(\n        (offer: any) => ({\n          sku: subscriptionId,\n          offerToken: offer.offerToken,\n        })\n      ) || [{sku: subscriptionId, offerToken: ''}];\n\n      await requestPurchase({\n        request: {\n          skus: [subscriptionId],\n          subscriptionOffers,\n        },\n        type: 'subs',\n      });\n    }\n    // Purchase result will be delivered via purchase listeners\n  } catch (error) {\n    console.error('Subscription request failed:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"legacy-api-deprecated",children:"Legacy API (Deprecated)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {requestSubscription} from 'expo-iap';\n\nconst buySubscription = async (subscriptionId: string) => {\n  try {\n    await requestSubscription({\n      request: {\n        sku: subscriptionId,\n        skus: [subscriptionId],\n        subscriptionOffers: [\n          {\n            sku: subscriptionId,\n            offerToken: 'offer_token_from_product',\n          },\n        ],\n      },\n    });\n  } catch (error) {\n    console.error('Subscription request failed:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"params"})," (object):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"request"})," (object): Subscription request configuration","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": ",(0,i.jsx)(n.code,{children:"sku"})," (string) - Subscription ID to purchase"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": ",(0,i.jsx)(n.code,{children:"skus"})," (string[]) - Array of subscription IDs to purchase"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": ",(0,i.jsx)(n.code,{children:"subscriptionOffers"})," (array) - Android subscription offers (required, can be empty)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-platform"}),": Include both ",(0,i.jsx)(n.code,{children:"sku"})," and ",(0,i.jsx)(n.code,{children:"skus"})," for compatibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"appAccountToken?"})," (string, iOS only): User identifier"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"obfuscatedAccountIdAndroid?"})," (string, Android only): Obfuscated account ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"obfuscatedProfileIdAndroid?"})," (string, Android only): Obfuscated profile ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"purchaseTokenAndroid?"})," (string, Android only): Token for subscription replacement"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"replacementModeAndroid?"})," (number, Android only): Replacement mode for subscription updates"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<SubscriptionPurchase | SubscriptionPurchase[] | null | void>"})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udea8 Important:"})," ",(0,i.jsx)(n.code,{children:"requestSubscription()"})," is deprecated and will be removed in v3.0.0. Always use ",(0,i.jsx)(n.code,{children:"requestPurchase()"})," with ",(0,i.jsx)(n.code,{children:"type: 'subs'"})," for subscriptions."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"finishtransaction",children:"finishTransaction()"}),"\n",(0,i.jsx)(n.p,{children:"Completes a purchase transaction. Must be called after successful receipt validation."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {finishTransaction} from 'expo-iap';\n\nconst completePurchase = async (purchase) => {\n  try {\n    // Validate receipt on your server first\n    const isValid = await validateReceiptOnServer(purchase);\n\n    if (isValid) {\n      // Grant purchase to user\n      await grantPurchaseToUser(purchase);\n\n      // Finish the transaction\n      await finishTransaction({\n        purchase,\n        isConsumable: true, // Set to true for consumable products\n      });\n\n      console.log('Transaction completed');\n    }\n  } catch (error) {\n    console.error('Failed to finish transaction:', error);\n  }\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"params"})," (object):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"purchase"})," (Purchase): The purchase object to finish"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isConsumable?"})," (boolean): Whether the product is consumable (Android)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<PurchaseResult | boolean>"})]}),"\n",(0,i.jsx)(n.h2,{id:"getavailablepurchases",children:"getAvailablePurchases()"}),"\n",(0,i.jsx)(n.p,{children:"Retrieves available purchases for restoration (non-consumable products and subscriptions)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getAvailablePurchases} from 'expo-iap';\n\nconst restorePurchases = async () => {\n  try {\n    const purchases = await getAvailablePurchases();\n\n    for (const purchase of purchases) {\n      // Validate and restore each purchase\n      const isValid = await validateReceiptOnServer(purchase);\n      if (isValid) {\n        await grantPurchaseToUser(purchase);\n      }\n    }\n\n    console.log('Purchases restored');\n  } catch (error) {\n    console.error('Failed to restore purchases:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Purchase[]>"})]}),"\n",(0,i.jsx)(n.h2,{id:"getpurchasehistories",children:"getPurchaseHistories()"}),"\n",(0,i.jsx)(n.p,{children:"Retrieves purchase history for the user."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getPurchaseHistories} from 'expo-iap';\n\nconst fetchPurchaseHistory = async () => {\n  try {\n    const histories = await getPurchaseHistories();\n    console.log('Purchase histories:', histories);\n    return histories;\n  } catch (error) {\n    console.error('Failed to fetch purchase histories:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," The previous ",(0,i.jsx)(n.code,{children:"getPurchaseHistory"})," (singular) function is deprecated and will be removed in version 3.0.0. Please use ",(0,i.jsx)(n.code,{children:"getPurchaseHistories"})," (plural) instead."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<Purchase[]>"})]}),"\n",(0,i.jsx)(n.h2,{id:"deeplinktosubscriptions",children:"deepLinkToSubscriptions()"}),"\n",(0,i.jsx)(n.p,{children:"Opens the platform-specific subscription management UI."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {deepLinkToSubscriptions} from 'expo-iap';\n\nconst openSubscriptionSettings = () => {\n  try {\n    deepLinkToSubscriptions();\n  } catch (error) {\n    console.error('Failed to open subscription settings:', error);\n  }\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,i.jsx)(n.h2,{id:"getstorefront-1",children:"getStorefront()"}),"\n",(0,i.jsx)(n.p,{children:"Return the storefront in ISO 3166-1 alpha-2 or ISO 3166-1 alpha-3 format"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {getStorefront} from 'expo-iap';\n\nconst storeFront = await getStorefront()\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Promise<string>"})]}),"\n",(0,i.jsx)(n.h2,{id:"purchase-interface",children:"Purchase Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"interface Purchase {\n  productId: string;\n  transactionId: string;\n  transactionDate: number;\n  transactionReceipt: string;\n  purchaseToken?: string;\n  \n  // iOS-specific properties\n  originalTransactionDateIos?: number;\n  originalTransactionIdentifierIos?: string;\n  expirationDateIos?: number; // Subscription expiration date (milliseconds)\n  environmentIos?: 'Production' | 'Sandbox';\n  \n  // Android-specific properties\n  dataAndroid?: string;\n  signatureAndroid?: string;\n  purchaseStateAndroid?: number; // 0 = purchased, 1 = canceled\n  isAcknowledgedAndroid?: boolean;\n  packageNameAndroid?: string;\n  developerPayloadAndroid?: string;\n  obfuscatedAccountIdAndroid?: string;\n  obfuscatedProfileIdAndroid?: string;\n  autoRenewingAndroid?: boolean; // Subscription auto-renewal status\n  purchaseTokenAndroid?: string;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"important-subscription-properties",children:"Important Subscription Properties"}),"\n",(0,i.jsx)(n.p,{children:"For subscription status checking:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Check ",(0,i.jsx)(n.code,{children:"expirationDateIos"})," to determine if the subscription is still active"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Check ",(0,i.jsx)(n.code,{children:"autoRenewingAndroid"})," to see if the user has canceled auto-renewal"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"All methods can throw errors that should be handled appropriately:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import {IAPError} from 'expo-iap';\n\ntry {\n  await requestPurchase({sku: 'product_id'});\n} catch (error) {\n  if (error instanceof IAPError) {\n    switch (error.code) {\n      case 'E_USER_CANCELLED':\n        console.log('User cancelled purchase');\n        break;\n      case 'E_NETWORK_ERROR':\n        console.log('Network error, please try again');\n        break;\n      default:\n        console.error('Purchase failed:', error.message);\n    }\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For a complete list of error codes, see the ",(0,i.jsx)(n.a,{href:"../error-codes",children:"Error Codes"})," documentation."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);