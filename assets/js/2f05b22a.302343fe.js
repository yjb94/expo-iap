"use strict";(self.webpackChunkexpo_iap_docs=self.webpackChunkexpo_iap_docs||[]).push([[1741],{402:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"examples/subscription-manager","title":"Subscription Management","description":"This example demonstrates how to implement subscription management with expo-iap, including subscription status checking, renewal handling, and subscription management UI.","source":"@site/versioned_docs/version-2.7/examples/subscription-manager.md","sourceDirName":"examples","slug":"/examples/subscription-manager","permalink":"/docs/2.7/examples/subscription-manager","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/expo-iap/tree/main/docs/versioned_docs/version-2.7/examples/subscription-manager.md","tags":[],"version":"2.7","sidebarPosition":2,"frontMatter":{"title":"Subscription Management","sidebar_label":"Subscriptions","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Basic Store","permalink":"/docs/2.7/examples/basic-store"},"next":{"title":"Complete Implementation","permalink":"/docs/2.7/examples/complete-impl"}}');var s=t(4848),r=t(8453),o=t(571);const a={title:"Subscription Management",sidebar_label:"Subscriptions",sidebar_position:2},c="Subscription Management Example",l={},u=[{value:"Important: Platform-Specific Subscription Properties",id:"important-platform-specific-subscription-properties",level:2},{value:"iOS Subscription Properties",id:"ios-subscription-properties",level:3},{value:"Android Subscription Properties",id:"android-subscription-properties",level:3},{value:"Key Differences",id:"key-differences",level:3},{value:"Complete Subscription Manager",id:"complete-subscription-manager",level:2},{value:"Key Features",id:"key-features",level:2},{value:"1. Subscription Status Tracking",id:"1-subscription-status-tracking",level:3},{value:"2. Multiple Subscription Tiers",id:"2-multiple-subscription-tiers",level:3},{value:"3. Subscription Management",id:"3-subscription-management",level:3},{value:"4. Server Integration",id:"4-server-integration",level:3},{value:"Platform Differences",id:"platform-differences",level:2},{value:"Subscription Purchase Parameters",id:"subscription-purchase-parameters",level:3},{value:"Receipt Validation Differences",id:"receipt-validation-differences",level:3},{value:"Server-Side Implementation",id:"server-side-implementation",level:2},{value:"Subscription Validation Endpoint",id:"subscription-validation-endpoint",level:3},{value:"Usage",id:"usage",level:2},{value:"Best Practices Demonstrated",id:"best-practices-demonstrated",level:2},{value:"Customization",id:"customization",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"subscription-management-example",children:"Subscription Management Example"})}),"\n",(0,s.jsx)(o.A,{}),"\n",(0,s.jsx)(e.p,{children:"This example demonstrates how to implement subscription management with expo-iap, including subscription status checking, renewal handling, and subscription management UI."}),"\n",(0,s.jsx)(e.h2,{id:"important-platform-specific-subscription-properties",children:"Important: Platform-Specific Subscription Properties"}),"\n",(0,s.jsx)(e.p,{children:"When checking subscription status, different platforms provide different properties:"}),"\n",(0,s.jsx)(e.h3,{id:"ios-subscription-properties",children:"iOS Subscription Properties"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"expirationDateIos"})}),": Unix timestamp (milliseconds) indicating when the subscription expires"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"originalTransactionDateIos"})}),": Original purchase date"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"environmentIos"})}),": Can be 'Production' or 'Sandbox' (useful for testing)"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"android-subscription-properties",children:"Android Subscription Properties"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"autoRenewingAndroid"})}),": Boolean indicating if the subscription will auto-renew"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"purchaseStateAndroid"})}),": Purchase state (0 = purchased, 1 = canceled)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"obfuscatedAccountIdAndroid"})}),": Account identifier if provided during purchase"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"key-differences",children:"Key Differences"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"iOS"}),": You must check ",(0,s.jsx)(e.code,{children:"expirationDateIos"})," against current time to determine if active"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Android"}),": You can check ",(0,s.jsx)(e.code,{children:"autoRenewingAndroid"})," - if false, the user has canceled"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["\u26a0\ufe0f ",(0,s.jsx)(e.strong,{children:"Note"}),": Always validate subscription status on your server for production apps. Client-side checks are useful for UI updates but should not be the sole source of truth."]}),"\n",(0,s.jsx)(e.h2,{id:"complete-subscription-manager",children:"Complete Subscription Manager"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import React, {useEffect, useState} from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  Alert,\n  StyleSheet,\n  ScrollView,\n  ActivityIndicator,\n  Platform,\n} from 'react-native';\nimport {useIAP} from 'expo-iap';\n\n// Subscription product IDs\nconst SUBSCRIPTION_SKUS = [\n  'com.yourapp.premium_monthly',\n  'com.yourapp.premium_yearly',\n];\n\ninterface SubscriptionStatus {\n  isActive: boolean;\n  productId?: string;\n  expirationDate?: Date;\n  autoRenewing?: boolean;\n  inGracePeriod?: boolean;\n}\n\nexport default function SubscriptionManager() {\n  const {\n    connected,\n    subscriptions,\n    currentPurchase,\n    currentPurchaseError,\n    getSubscriptions,\n    getAvailablePurchases,\n    requestPurchase,\n    finishTransaction,\n  } = useIAP();\n\n  const [loading, setLoading] = useState(false);\n  const [subscriptionStatus, setSubscriptionStatus] =\n    useState<SubscriptionStatus>({\n      isActive: false,\n    });\n\n  // Initialize and load subscriptions\n  useEffect(() => {\n    if (connected) {\n      loadSubscriptions();\n      checkSubscriptionStatus();\n    }\n  }, [connected]);\n\n  // Handle subscription purchases\n  useEffect(() => {\n    if (currentPurchase) {\n      handleSubscriptionPurchase(currentPurchase);\n    }\n  }, [currentPurchase]);\n\n  // Handle purchase errors\n  useEffect(() => {\n    if (currentPurchaseError) {\n      handlePurchaseError(currentPurchaseError);\n    }\n  }, [currentPurchaseError]);\n\n  const loadSubscriptions = async () => {\n    try {\n      setLoading(true);\n      await getSubscriptions({skus: SUBSCRIPTION_SKUS});\n      console.log('Subscriptions loaded');\n    } catch (error) {\n      console.error('Failed to load subscriptions:', error);\n      Alert.alert('Error', 'Failed to load subscription options');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkSubscriptionStatus = async () => {\n    try {\n      const purchases = await getAvailablePurchases();\n      const activeSubscription = findActiveSubscription(purchases);\n\n      if (activeSubscription) {\n        const status = await validateSubscriptionStatus(activeSubscription);\n        setSubscriptionStatus(status);\n      } else {\n        setSubscriptionStatus({isActive: false});\n      }\n    } catch (error) {\n      console.error('Failed to check subscription status:', error);\n    }\n  };\n\n  const findActiveSubscription = (purchases) => {\n    // Find subscriptions and check if they're still active\n    return purchases.find((purchase) => {\n      if (!SUBSCRIPTION_SKUS.includes(purchase.productId)) {\n        return false;\n      }\n      // Check if the subscription is still active\n      return isSubscriptionActive(purchase);\n    });\n  };\n\n  /**\n   * Platform-specific subscription status checking\n   * iOS: Uses expirationDateIos to check if subscription is expired\n   * Android: Uses autoRenewingAndroid to check renewal status\n   */\n  const isSubscriptionActive = (purchase) => {\n    const currentTime = Date.now();\n\n    // Check platform-specific subscription properties\n    if (Platform.OS === 'ios') {\n      // iOS: Check expiration date\n      if (purchase.expirationDateIos) {\n        console.log(\n          'iOS Subscription expiration:',\n          new Date(purchase.expirationDateIos).toISOString(),\n        );\n        return purchase.expirationDateIos > currentTime;\n      }\n\n      // For sandbox/development environment\n      if (purchase.environmentIos === 'Sandbox') {\n        console.log('iOS Sandbox environment detected');\n        // In sandbox, also check if it's a recent purchase (within 24 hours)\n        const dayInMs = 24 * 60 * 60 * 1000;\n        if (\n          purchase.transactionDate &&\n          currentTime - purchase.transactionDate < dayInMs\n        ) {\n          return true;\n        }\n      }\n    } else if (Platform.OS === 'android') {\n      // Android: Check auto-renewing status\n      if (purchase.autoRenewingAndroid !== undefined) {\n        console.log(\n          'Android auto-renewing status:',\n          purchase.autoRenewingAndroid,\n        );\n        return purchase.autoRenewingAndroid;\n      }\n\n      // Fallback: Check if purchase is recent (within 30 days for monthly subscriptions)\n      const monthInMs = 30 * 24 * 60 * 60 * 1000;\n      if (\n        purchase.transactionDate &&\n        currentTime - purchase.transactionDate < monthInMs\n      ) {\n        return true;\n      }\n    }\n\n    // If we can't determine status, assume inactive\n    return false;\n  };\n\n  const validateSubscriptionStatus = async (purchase) => {\n    try {\n      // Validate subscription on your server\n      const response = await fetch(\n        'https://your-server.com/validate-subscription',\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            receipt: purchase.transactionReceipt,\n            productId: purchase.productId,\n            // Platform-specific fields\n            purchaseToken: purchase.purchaseToken, // Android\n            transactionId: purchase.transactionId, // iOS\n          }),\n        },\n      );\n\n      const result = await response.json();\n\n      return {\n        isActive: result.isActive,\n        productId: purchase.productId,\n        expirationDate: new Date(result.expirationDate),\n        autoRenewing: result.autoRenewing,\n        inGracePeriod: result.inGracePeriod,\n      };\n    } catch (error) {\n      console.error('Subscription validation error:', error);\n      return {isActive: false};\n    }\n  };\n\n  const handleSubscriptionPurchase = async (purchase) => {\n    try {\n      console.log('Processing subscription purchase:', purchase.productId);\n\n      // Validate the subscription purchase\n      const subscriptionInfo = await validateSubscriptionStatus(purchase);\n\n      if (subscriptionInfo.isActive) {\n        // Grant subscription benefits\n        await grantSubscriptionBenefits(purchase);\n\n        // Update local status\n        setSubscriptionStatus(subscriptionInfo);\n\n        // Finish the transaction\n        await finishTransaction({purchase});\n\n        Alert.alert(\n          'Subscription Activated',\n          `Welcome to Premium! Your subscription is now active.`,\n        );\n      } else {\n        Alert.alert('Error', 'Subscription validation failed');\n      }\n    } catch (error) {\n      console.error('Error processing subscription:', error);\n      Alert.alert('Error', 'Failed to activate subscription');\n    }\n  };\n\n  const handlePurchaseError = (error) => {\n    console.error('Subscription purchase error:', error);\n\n    switch (error.code) {\n      case 'E_USER_CANCELLED':\n        // User cancelled - no action needed\n        break;\n      case 'E_ALREADY_OWNED':\n        Alert.alert(\n          'Already Subscribed',\n          'You already have an active subscription. Check your subscription status.',\n        );\n        checkSubscriptionStatus(); // Refresh status\n        break;\n      default:\n        Alert.alert(\n          'Subscription Failed',\n          error.message || 'Unknown error occurred',\n        );\n        break;\n    }\n  };\n\n  const grantSubscriptionBenefits = async (purchase) => {\n    try {\n      // Grant subscription benefits on your server\n      await fetch('https://your-server.com/grant-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: 'current-user-id',\n          productId: purchase.productId,\n          transactionId: purchase.transactionId,\n        }),\n      });\n\n      console.log('Subscription benefits granted');\n    } catch (error) {\n      console.error('Failed to grant subscription benefits:', error);\n      throw error;\n    }\n  };\n\n  const purchaseSubscription = async (productId) => {\n    if (!connected) {\n      Alert.alert('Error', 'Store is not connected');\n      return;\n    }\n\n    try {\n      console.log('Requesting subscription:', productId);\n\n      // Platform-specific subscription purchase requests\n      if (Platform.OS === 'ios') {\n        await requestPurchase({\n          request: {\n            sku: productId,\n            andDangerouslyFinishTransactionAutomatically: false,\n          },\n          type: 'subs',\n        });\n      } /* Platform.OS === \"android\" */ else {\n        await requestPurchase({\n          request: {skus: [productId]},\n        });\n      }\n    } catch (error) {\n      console.error('Subscription request failed:', error);\n      Alert.alert('Error', 'Failed to start subscription purchase');\n    }\n  };\n\n  const openSubscriptionManagement = () => {\n    import('expo-iap').then(({deepLinkToSubscriptions}) => {\n      deepLinkToSubscriptions();\n    });\n  };\n\n  const restoreSubscriptions = async () => {\n    try {\n      setLoading(true);\n      await checkSubscriptionStatus();\n      Alert.alert('Restore Complete', 'Subscription status has been updated');\n    } catch (error) {\n      Alert.alert('Error', 'Failed to restore subscriptions');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const renderSubscriptionStatus = () => {\n    if (subscriptionStatus.isActive) {\n      return (\n        <View style={styles.statusCard}>\n          <Text style={styles.statusTitle}>Premium Active</Text>\n          <Text style={styles.statusSubtitle}>\n            Your premium subscription is active\n          </Text>\n\n          {subscriptionStatus.expirationDate && (\n            <Text style={styles.statusDetail}>\n              {subscriptionStatus.autoRenewing ? 'Renews' : 'Expires'} on{' '}\n              {formatDate(subscriptionStatus.expirationDate)}\n            </Text>\n          )}\n\n          {subscriptionStatus.inGracePeriod && (\n            <Text style={styles.warningText}>\n              Your subscription is in grace period. Please update your payment\n              method.\n            </Text>\n          )}\n\n          <TouchableOpacity\n            style={styles.manageButton}\n            onPress={openSubscriptionManagement}\n          >\n            <Text style={styles.manageButtonText}>Manage Subscription</Text>\n          </TouchableOpacity>\n        </View>\n      );\n    }\n\n    return (\n      <View style={styles.statusCard}>\n        <Text style={styles.statusTitle}>No Active Subscription</Text>\n        <Text style={styles.statusSubtitle}>\n          Subscribe to unlock premium features\n        </Text>\n      </View>\n    );\n  };\n\n  const renderSubscriptionOption = (subscription) => {\n    const isYearly = subscription.productId.includes('yearly');\n    const savings = isYearly ? '2 months free!' : null;\n\n    return (\n      <View key={subscription.productId} style={styles.subscriptionCard}>\n        <View style={styles.subscriptionInfo}>\n          <Text style={styles.subscriptionTitle}>\n            {isYearly ? 'Yearly Premium' : 'Monthly Premium'}\n          </Text>\n          <Text style={styles.subscriptionPrice}>\n            {subscription.localizedPrice}\n          </Text>\n          {subscription.subscriptionPeriod && (\n            <Text style={styles.subscriptionPeriod}>\n              per {subscription.subscriptionPeriod}\n            </Text>\n          )}\n          {savings && <Text style={styles.savingsText}>{savings}</Text>}\n        </View>\n\n        <TouchableOpacity\n          style={[styles.subscribeButton, isYearly && styles.yearlyButton]}\n          onPress={() => purchaseSubscription(subscription.productId)}\n          disabled={loading || subscriptionStatus.isActive}\n        >\n          <Text style={styles.subscribeButtonText}>\n            {subscriptionStatus.isActive ? 'Active' : 'Subscribe'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  if (!connected) {\n    return (\n      <View style={styles.centerContainer}>\n        <ActivityIndicator size=\"large\" />\n        <Text style={styles.loadingText}>Connecting to store...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView style={styles.container}>\n      <Text style={styles.title}>Subscription Management</Text>\n\n      {renderSubscriptionStatus()}\n\n      <Text style={styles.sectionTitle}>Subscription Options</Text>\n\n      {loading ? (\n        <View style={styles.centerContainer}>\n          <ActivityIndicator size=\"large\" />\n          <Text style={styles.loadingText}>Loading subscriptions...</Text>\n        </View>\n      ) : (\n        <View>{subscriptions.map(renderSubscriptionOption)}</View>\n      )}\n\n      <View style={styles.actionButtons}>\n        <TouchableOpacity\n          style={styles.restoreButton}\n          onPress={restoreSubscriptions}\n          disabled={loading}\n        >\n          <Text style={styles.restoreButtonText}>Restore Purchases</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.footer}>\n        <Text style={styles.footerText}>\n          Subscriptions auto-renew unless cancelled. You can manage your\n          subscriptions in your device settings.\n        </Text>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#f5f5f5',\n  },\n  centerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 24,\n    color: '#333',\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: '#666',\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginTop: 24,\n    marginBottom: 16,\n    color: '#333',\n  },\n  statusCard: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 12,\n    marginBottom: 24,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  statusTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 8,\n    color: '#333',\n  },\n  statusSubtitle: {\n    fontSize: 16,\n    color: '#666',\n    marginBottom: 12,\n  },\n  statusDetail: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 8,\n  },\n  warningText: {\n    fontSize: 14,\n    color: '#ff9800',\n    fontStyle: 'italic',\n    marginBottom: 16,\n  },\n  manageButton: {\n    backgroundColor: '#2196f3',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    alignSelf: 'flex-start',\n  },\n  manageButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n  subscriptionCard: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 12,\n    marginBottom: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  subscriptionInfo: {\n    flex: 1,\n  },\n  subscriptionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 4,\n    color: '#333',\n  },\n  subscriptionPrice: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#2196f3',\n    marginBottom: 4,\n  },\n  subscriptionPeriod: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 4,\n  },\n  savingsText: {\n    fontSize: 14,\n    color: '#4caf50',\n    fontWeight: 'bold',\n  },\n  subscribeButton: {\n    backgroundColor: '#2196f3',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n    minWidth: 100,\n  },\n  yearlyButton: {\n    backgroundColor: '#ff9800',\n  },\n  subscribeButtonText: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  actionButtons: {\n    marginTop: 32,\n    alignItems: 'center',\n  },\n  restoreButton: {\n    backgroundColor: 'transparent',\n    borderWidth: 1,\n    borderColor: '#2196f3',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n  },\n  restoreButtonText: {\n    color: '#2196f3',\n    fontWeight: 'bold',\n  },\n  footer: {\n    marginTop: 32,\n    paddingTop: 20,\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0',\n  },\n  footerText: {\n    fontSize: 12,\n    color: '#666',\n    textAlign: 'center',\n    lineHeight: 18,\n  },\n});\n"})}),"\n",(0,s.jsx)(e.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsx)(e.h3,{id:"1-subscription-status-tracking",children:"1. Subscription Status Tracking"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Real-time subscription status validation"}),"\n",(0,s.jsx)(e.li,{children:"Grace period handling"}),"\n",(0,s.jsx)(e.li,{children:"Auto-renewal status"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"2-multiple-subscription-tiers",children:"2. Multiple Subscription Tiers"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Monthly and yearly options"}),"\n",(0,s.jsx)(e.li,{children:"Pricing display with savings indicators"}),"\n",(0,s.jsx)(e.li,{children:"Visual differentiation for different tiers"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"3-subscription-management",children:"3. Subscription Management"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Direct links to platform subscription management"}),"\n",(0,s.jsx)(e.li,{children:"Purchase restoration"}),"\n",(0,s.jsx)(e.li,{children:"Status refresh capabilities"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"4-server-integration",children:"4. Server Integration"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Server-side subscription validation"}),"\n",(0,s.jsx)(e.li,{children:"Benefit granting system"}),"\n",(0,s.jsx)(e.li,{children:"Status synchronization"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,s.jsx)(e.h3,{id:"subscription-purchase-parameters",children:"Subscription Purchase Parameters"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Important"}),": iOS and Android have different parameter structures for subscription purchases:"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"iOS Structure:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {\n    sku: productId,\n    andDangerouslyFinishTransactionAutomatically: false,\n  },\n  type: 'subs',\n});\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Android Structure:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"await requestPurchase({\n  request: {skus: [productId]},\n});\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Platform-specific Implementation:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"if (Platform.OS === 'ios') {\n  await requestPurchase({\n    request: {\n      sku: productId,\n      andDangerouslyFinishTransactionAutomatically: false,\n    },\n    type: 'subs',\n  });\n} else {\n  await requestPurchase({\n    request: {skus: [productId]},\n  });\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"receipt-validation-differences",children:"Receipt Validation Differences"}),"\n",(0,s.jsx)(e.p,{children:"Subscription validation requires different approaches:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"iOS"}),": Send ",(0,s.jsx)(e.code,{children:"transactionReceipt"})," to Apple's validation servers"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Android"}),": Send ",(0,s.jsx)(e.code,{children:"purchaseToken"})," and ",(0,s.jsx)(e.code,{children:"packageName"})," to Google Play validation"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["This is handled in the ",(0,s.jsx)(e.code,{children:"validateSubscriptionStatus"})," function with platform-specific logic."]}),"\n",(0,s.jsx)(e.h2,{id:"server-side-implementation",children:"Server-Side Implementation"}),"\n",(0,s.jsx)(e.h3,{id:"subscription-validation-endpoint",children:"Subscription Validation Endpoint"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// Example Node.js/Express endpoint\napp.post('/validate-subscription', async (req, res) => {\n  const {receipt, productId, purchaseToken, transactionId} = req.body;\n\n  try {\n    let validationResult;\n\n    if (purchaseToken) {\n      // Android - Google Play Billing validation\n      validationResult = await validateGooglePlaySubscription(\n        productId,\n        purchaseToken,\n      );\n    } else {\n      // iOS - App Store validation\n      validationResult = await validateAppStoreReceipt(receipt);\n    }\n\n    res.json({\n      isActive: validationResult.isActive,\n      expirationDate: validationResult.expirationDate,\n      autoRenewing: validationResult.autoRenewing,\n      inGracePeriod: validationResult.inGracePeriod,\n    });\n  } catch (error) {\n    console.error('Validation error:', error);\n    res.status(500).json({error: 'Validation failed'});\n  }\n});\n"})}),"\n",(0,s.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import React from 'react';\nimport {NavigationContainer} from '@react-navigation/native';\nimport SubscriptionManager from './SubscriptionManager';\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <SubscriptionManager />\n    </NavigationContainer>\n  );\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices-demonstrated",children:"Best Practices Demonstrated"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Status Validation"}),": Always validate subscription status server-side"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Grace Period Handling"}),": Handle billing issues gracefully"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"User Experience"}),": Provide clear subscription status and management options"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Error Handling"}),": Comprehensive error handling for various scenarios"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Platform Integration"}),": Use platform-specific subscription management tools"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"customization",children:"Customization"}),"\n",(0,s.jsx)(e.p,{children:"You can extend this example with:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Multiple subscription tiers"}),"\n",(0,s.jsx)(e.li,{children:"Promotional offers and trials"}),"\n",(0,s.jsx)(e.li,{children:"Family sharing support"}),"\n",(0,s.jsx)(e.li,{children:"Subscription analytics"}),"\n",(0,s.jsx)(e.li,{children:"Custom subscription management UI"}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},571:(n,e,t)=>{t.d(e,{A:()=>o});var i=t(6540),s=t(4848);function r({className:n="adfit",style:e,unit:t,height:r,width:o}){return(0,i.useEffect)(()=>{const e=setTimeout(()=>{const e=document.querySelector(`.${n}`);if(!e)return void console.warn(`AdFit: Element with class "${n}" not found`);const i=e.querySelectorAll(".kakao_ad_area"),s=e.querySelectorAll('script[src*="kas/static/ba.min.js"]');i.forEach(n=>n.remove()),s.forEach(n=>n.remove());const a=document.createElement("ins"),c=document.createElement("script");a.className="kakao_ad_area",a.style.cssText="display:none; width:100%;",c.async=!0,c.type="text/javascript",c.src="//t1.daumcdn.net/kas/static/ba.min.js",a.setAttribute("data-ad-width",o.toString()),a.setAttribute("data-ad-height",r.toString()),a.setAttribute("data-ad-unit",t),e.appendChild(a),e.appendChild(c)},100);return()=>clearTimeout(e)},[n,t,r,o]),(0,s.jsx)("div",{style:e,children:(0,s.jsx)("div",{className:n})})}function o(){return(0,s.jsx)(r,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(n){const e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);